namespace = "Parse"
expectation = "Pass"

[[outputs]]

[outputs.imports]

[outputs.stubs]

[outputs.program_scopes.test]
program_id = '{"name":"test","network":"\"{\\\"id\\\":\\\"1\\\",\\\"name\\\":\\\"aleo\\\",\\\"span\\\":\\\"{\\\\\\\"lo\\\\\\\":0,\\\\\\\"hi\\\\\\\":0}\\\"}\""}'
consts = []
structs = []
mappings = []
functions = [
    [
    "x",
    { annotations = [], variant = "Function", identifier = '{"id":"2","name":"x","span":"{\"lo\":39,\"hi\":40}"}', id = 18, input = [{ identifier = '{"id":"3","name":"y","span":"{\"lo\":50,\"hi\":51}"}', mode = "Constant", id = 4, type_ = { Integer = "U32" }, span = { lo = 50, hi = 56 } }], output = [{ mode = "None", id = 5, type_ = { Integer = "U8" }, span = { lo = 61, hi = 63 } }], output_type = { Integer = "U8" }, block = { id = 17, statements = [{ Conditional = { id = 16, condition = { Binary = { op = "Lt", id = 8, left = { Identifier = '{"id":"6","name":"y","span":"{\"lo\":77,\"hi\":78}"}' }, right = { Literal = { Integer = [
    "U32",
    "5",
    { span = { lo = 81, hi = 85 } },
    7,
] } }, span = { lo = 77, hi = 85 } } }, then = { id = 15, statements = [{ Expression = { id = 14, expression = { Call = { program = "test", id = 13, arguments = [{ Binary = { op = "Add", id = 12, left = { Identifier = '{"id":"10","name":"y","span":"{\"lo\":102,\"hi\":103}"}' }, right = { Literal = { Integer = [
    "U32",
    "1",
    { span = { lo = 104, hi = 108 } },
    11,
] } }, span = { lo = 102, hi = 108 } } }], function = { Identifier = '{"id":"9","name":"x","span":"{\"lo\":100,\"hi\":101}"}' }, span = { lo = 100, hi = 109 } } }, span = { lo = 100, hi = 110 } } }], span = { lo = 86, hi = 120 } }, span = { lo = 74, hi = 120 } } }], span = { lo = 64, hi = 126 } }, span = { lo = 30, hi = 126 } },
],
    [
    "main",
    { annotations = [], variant = "Function", identifier = '{"id":"19","name":"main","span":"{\"lo\":145,\"hi\":149}"}', output_type = "Boolean", id = 30, input = [{ identifier = '{"id":"20","name":"y","span":"{\"lo\":150,\"hi\":151}"}', mode = "None", type_ = "Boolean", id = 21, span = { lo = 150, hi = 157 } }], output = [{ mode = "None", type_ = "Boolean", id = 22, span = { lo = 162, hi = 166 } }], block = { id = 29, statements = [
    { Expression = { id = 26, expression = { Call = { program = "test", id = 25, arguments = [{ Literal = { Integer = [
    "U32",
    "1",
    { span = { lo = 179, hi = 183 } },
    24,
] } }], function = { Identifier = '{"id":"23","name":"x","span":"{\"lo\":177,\"hi\":178}"}' }, span = { lo = 177, hi = 184 } } }, span = { lo = 177, hi = 185 } } },
    { Return = { id = 28, expression = { Identifier = '{"id":"27","name":"y","span":"{\"lo\":201,\"hi\":202}"}' }, span = { lo = 194, hi = 203 } } },
], span = { lo = 167, hi = 209 } }, span = { lo = 136, hi = 209 } },
],
]

[outputs.program_scopes.test.span]
lo = 2
hi = 211
