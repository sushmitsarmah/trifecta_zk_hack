namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "e7a9420a403419844c2b328330be1264ec8a0ff518ed881f84970fe71845c6b6", unrolled_ast = "e7a9420a403419844c2b328330be1264ec8a0ff518ed881f84970fe71845c6b6", ssa_ast = "13d8fdfd7a4e3f8a225e74f3520204957edbef4ae041cfbc0144084e347b7086", flattened_ast = "e4b2496a10ba914ae051f0bf01c7da7336ae581da2f66a4434fe47b600272235", destructured_ast = "194243154841f88aead74d3c31339189104e4a675c0e2c8f44b33783905a5171", inlined_ast = "194243154841f88aead74d3c31339189104e4a675c0e2c8f44b33783905a5171", dce_ast = "194243154841f88aead74d3c31339189104e4a675c0e2c8f44b33783905a5171", bytecode = """
program test.aleo;

function main:
    input r0 as boolean.private;
    or false r0 into r1;
    assert.eq r1 true;
    ternary r0 r0 r0 into r2;
    output r2 as boolean.private;
""", errors = "", warnings = "" }] }]]
