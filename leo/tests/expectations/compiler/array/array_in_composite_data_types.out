namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "df75ddc12225ac6a386c0c3eef00e66e0944691fc384b27096c5daf0a103e0ce", unrolled_ast = "df75ddc12225ac6a386c0c3eef00e66e0944691fc384b27096c5daf0a103e0ce", ssa_ast = "ed2178a2a85bdf8b1775fafe950fc81d25e6b144a51e30faa7370adda15f4151", flattened_ast = "77faef8d0b740f66a77d17a9a194a2c34fecd583862077d7c9f04da952f00e7f", destructured_ast = "94bd5ab71dfad6a18a92fd4ea2bbf7fb8f45f39572554b14df25228f29e6ae75", inlined_ast = "94bd5ab71dfad6a18a92fd4ea2bbf7fb8f45f39572554b14df25228f29e6ae75", dce_ast = "94bd5ab71dfad6a18a92fd4ea2bbf7fb8f45f39572554b14df25228f29e6ae75", bytecode = """
program test.aleo;

record floo:
    owner as address.private;
    data as [u8; 8u32].private;

struct bar:
    data as [u8; 8u32];

function foo:
    input r0 as [[boolean; 8u32]; 8u32].private;
    cast  1u8 1u8 1u8 1u8 1u8 1u8 1u8 1u8 into r1 as [u8; 8u32];
    cast r1 into r2 as bar;
    cast  1u8 1u8 1u8 1u8 1u8 1u8 1u8 1u8 into r3 as [u8; 8u32];
    cast self.caller r3 into r4 as floo.record;
    output r0[0u32][0u32] as boolean.private;
    output r2 as bar.private;
    output r4 as floo.record;
""", errors = "", warnings = "" }] }]]
