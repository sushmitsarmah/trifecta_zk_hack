namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "d10f263df43d11f80f4680fa77584cbc84821340f3d4988a71123a23d91c6568", unrolled_ast = "d10f263df43d11f80f4680fa77584cbc84821340f3d4988a71123a23d91c6568", ssa_ast = "34e840d725a0480f04bf8ce09126011132cd3e0e0385a91222380ac11096e1c1", flattened_ast = "1b310e6f2ac91a36840b8d5e77ddcaa32c1cb2b78cea171c694ca9aaa11a4265", destructured_ast = "d0248ad1b4f8df9edea988d5576c4cc29cfb991d63a1e4f77dd473137bc044a0", inlined_ast = "d0248ad1b4f8df9edea988d5576c4cc29cfb991d63a1e4f77dd473137bc044a0", dce_ast = "d0248ad1b4f8df9edea988d5576c4cc29cfb991d63a1e4f77dd473137bc044a0", bytecode = """
program test.aleo;

struct bar:
    data as u8;

function foo:
    input r0 as [bar; 8u32].private;
    output r0[0u32].data as u8.private;
""", errors = "", warnings = "" }] }]]
