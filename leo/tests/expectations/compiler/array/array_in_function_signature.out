namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "ea45d56006d7ddd3c6a7e98aa7f145343703aa3b60e24cedecee209592ea0558", unrolled_ast = "ea45d56006d7ddd3c6a7e98aa7f145343703aa3b60e24cedecee209592ea0558", ssa_ast = "ffe35f7b45090d1997fb2865d837e31ac9c385f89c819386bd245a5757d3e2fa", flattened_ast = "28e3936f1ae645aa57cc20d946996c1b9a4e715ec8c50c3957d00280b517b4fb", destructured_ast = "772c5ec8d0c490932cb4f1baa510284f76af446a220ff119441bb6bfb00133e5", inlined_ast = "772c5ec8d0c490932cb4f1baa510284f76af446a220ff119441bb6bfb00133e5", dce_ast = "772c5ec8d0c490932cb4f1baa510284f76af446a220ff119441bb6bfb00133e5", bytecode = """
program test.aleo;

function foo:
    input r0 as [boolean; 8u32].private;
    output true as boolean.private;

function bar:
    input r0 as [boolean; 8u32].private;
    output r0 as [boolean; 8u32].private;

closure baz:
    input r0 as [boolean; 8u32];
    assert.eq r0[0u32] true;
    output true as boolean;

closure qux:
    input r0 as [boolean; 8u32];
    assert.eq r0[0u32] true;
    output r0 as [boolean; 8u32];
""", errors = "", warnings = "" }] }]]
