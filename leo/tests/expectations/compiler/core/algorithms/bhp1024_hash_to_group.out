namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "69ba7af7318b356010c470baa89403e4b3bf78c69678f4bdb8ff2a8795b622ed", unrolled_ast = "8158ebd99c6b054fac5fd9f058ea3b75a1645437f1a7ecbb386c7c67212c573a", ssa_ast = "a180bc1914cafc26cfe703d0c86c339cab6518e607b675c102fcf0b9e2510bed", flattened_ast = "5ec641881bfac397b8b4db175fb31f9a81d9224089067f5d040503eb08998b02", destructured_ast = "c45526b3a45989106e6e6f0fa67900d506c9bcb8b9fec4a5127f6040182c0e94", inlined_ast = "c45526b3a45989106e6e6f0fa67900d506c9bcb8b9fec4a5127f6040182c0e94", dce_ast = "660c5fa6f13a8000bf47bfa9255a5f8a5f1692d45881f784e23818bd3911d4b4", bytecode = """
program test.aleo;

struct Foo:
    a as u128;
    b as u128;

function main:
    input r0 as i8.private;
    input r1 as i16.private;
    input r2 as i32.private;
    input r3 as i64.private;
    input r4 as u8.private;
    input r5 as u16.private;
    input r6 as u32.private;
    input r7 as u64.private;
    hash.bhp1024 aleo10qerras5799u6k7rjtc9y3hcwxuykr45qra7x7dp6jgnc0923czqm0lgta into r8 as group;
    hash.bhp1024 1scalar into r9 as group;
    add r8 r9 into r10;
    output r10 as group.private;
""", errors = "", warnings = "" }] }]]
