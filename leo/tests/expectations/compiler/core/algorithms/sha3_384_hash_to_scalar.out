namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "eec80ed0918648ae40e69b769dc890f44d244d81c9b66c1dd95281d79b66e275", unrolled_ast = "54db5a9389d585223e961a4b96c27848e656903f88eb0a5ed771f6af619ad136", ssa_ast = "af79d9d2bf73d497e619079935118227c504f2f179c216888bee30e8697aabf5", flattened_ast = "25f423b1820c27838313bb2339818bab2d26184bd91fe2225fbbb61fdfb66bf9", destructured_ast = "e01b9a811ea8d862487957e2a392f6379d3334fc6cf4d3cedbe267616ed8b090", inlined_ast = "e01b9a811ea8d862487957e2a392f6379d3334fc6cf4d3cedbe267616ed8b090", dce_ast = "8c6b732b09bfff7ce56b2c18f2dd3f12cc291ee1a2105726330a1e7b5c4cf107", bytecode = """
program test.aleo;

struct Foo:
    a as u128;
    b as u128;

function main:
    input r0 as i8.private;
    input r1 as i16.private;
    input r2 as i32.private;
    input r3 as i64.private;
    input r4 as u8.private;
    input r5 as u16.private;
    input r6 as u32.private;
    input r7 as u64.private;
    hash.sha3_384 aleo10qerras5799u6k7rjtc9y3hcwxuykr45qra7x7dp6jgnc0923czqm0lgta into r8 as scalar;
    hash.sha3_384 1scalar into r9 as scalar;
    add r8 r9 into r10;
    output r10 as scalar.private;
""", errors = "", warnings = "" }] }]]
