namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "74f2b106148033859a4a34b5548cdbd4cdb87e2db64f36d9a2cf20b0a6d364b4", unrolled_ast = "122e87d7ad4b9ffbd473deaf76344f30590399f1753071d49d62bd20c909b3f5", ssa_ast = "0807c97e2487527162012204199c71597e580d24c9c2d5131b08ffdff34df8e9", flattened_ast = "4a369a3422197944fc44f2474c797334792d77b0f56bccc5905650bcbb80c91d", destructured_ast = "e6f76b8823384ddab03f6897bd0d06927e24bb01b192cb9965f28682ecffc058", inlined_ast = "e6f76b8823384ddab03f6897bd0d06927e24bb01b192cb9965f28682ecffc058", dce_ast = "5f0e1de00cd8e520ab1d4f5607c17ec8054669a985f0d7ebd25076193e6a08ff", bytecode = """
program test.aleo;

struct Foo:
    a as u128;
    b as u128;

function main:
    input r0 as i8.private;
    input r1 as i16.private;
    input r2 as i32.private;
    input r3 as i64.private;
    input r4 as u8.private;
    input r5 as u16.private;
    input r6 as u32.private;
    input r7 as u64.private;
    hash.sha3_512 aleo10qerras5799u6k7rjtc9y3hcwxuykr45qra7x7dp6jgnc0923czqm0lgta into r8 as group;
    hash.sha3_512 1scalar into r9 as group;
    add r8 r9 into r10;
    output r10 as group.private;
""", errors = "", warnings = "" }] }]]
