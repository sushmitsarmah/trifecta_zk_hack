namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "d60a209f48b0a4b33519f098daa79b8b28be280323adeae4c0a616bcc5d62110", unrolled_ast = "8f98b550fa777a3da4d408c2d409d28b439358e0617cd46bd3c30caa9f67cd8e", ssa_ast = "65b028bd8a2e400cd6e951e1d107e3239101d440e5dff9cd60d918f39d63528e", flattened_ast = "6096263171f3d05719d67313bf01d8a5bceae756c8b9d83f49ad88c516deeddd", destructured_ast = "2f63294c587d8a4eb24e234b04655e5bc67ac1db13fbba98b096691cc7b8324b", inlined_ast = "2f63294c587d8a4eb24e234b04655e5bc67ac1db13fbba98b096691cc7b8324b", dce_ast = "8d6f2f9e8f83e75ed01630361f68c88b5e273733d0cef955368a7cd8283ea64c", bytecode = """
program test.aleo;

struct Foo:
    a as u128;
    b as u128;

function main:
    input r0 as i8.private;
    input r1 as i16.private;
    input r2 as i32.private;
    input r3 as i64.private;
    input r4 as u8.private;
    input r5 as u16.private;
    input r6 as u32.private;
    input r7 as u64.private;
    hash.bhp512 aleo10qerras5799u6k7rjtc9y3hcwxuykr45qra7x7dp6jgnc0923czqm0lgta into r8 as scalar;
    hash.bhp512 1scalar into r9 as scalar;
    add r8 r9 into r10;
    output r10 as scalar.private;
""", errors = "", warnings = "" }] }]]
