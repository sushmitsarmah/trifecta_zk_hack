namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "f405095809db6c091f111abe5150dd9006a07cd0f132f06b27a2a8b508358e18", unrolled_ast = "1d7e747c91240e93fac86b0ae39c4c4f6a3ace3160c94629ae3bb44b8afc89e9", ssa_ast = "54bb35fdcb4b2a2026fccebc4016c292d611cc90476cf31db41f276d14bf2494", flattened_ast = "db1ade458888d7b55419f7fcd9bd0dbaa03488b109e5f8e66dcbe031726e55d7", destructured_ast = "a06158ca151b20e223fe688593d36ea97970e78187d8371bd368ab753f77d3a5", inlined_ast = "a06158ca151b20e223fe688593d36ea97970e78187d8371bd368ab753f77d3a5", dce_ast = "584accd0556169febd157190eb1b88452c2f46465da89ea79579052fe5031c07", bytecode = """
program test.aleo;

struct Foo:
    a as u128;
    b as u128;

function main:
    input r0 as i8.private;
    input r1 as i16.private;
    input r2 as i32.private;
    input r3 as i64.private;
    input r4 as u8.private;
    input r5 as u16.private;
    input r6 as u32.private;
    input r7 as u64.private;
    hash.bhp1024 aleo10qerras5799u6k7rjtc9y3hcwxuykr45qra7x7dp6jgnc0923czqm0lgta into r8 as scalar;
    hash.bhp1024 1scalar into r9 as scalar;
    add r8 r9 into r10;
    output r10 as scalar.private;
""", errors = "", warnings = "" }] }]]
