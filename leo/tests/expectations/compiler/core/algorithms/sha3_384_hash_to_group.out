namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "82de0890b05877addbe0f7fa1e0f042ae94ba18fed6ca520c146f8abac917233", unrolled_ast = "1d1541b21e39a9ced85d137dec410ee29c3f0d9aceeab9b471a9c0690c1b2f0a", ssa_ast = "06337b64c74f302179dace0f047a30c768585fb7fb560c7399e4896fa34bb688", flattened_ast = "7ceeaedd07b76e4b1b8201dcd03484c25890422a3be7098bcc963333e32b6be5", destructured_ast = "35ad15f487cd52f9a1cf08ac6029510cf09a2f18d0b1253b2699758e3955ca86", inlined_ast = "35ad15f487cd52f9a1cf08ac6029510cf09a2f18d0b1253b2699758e3955ca86", dce_ast = "41c4ccc59ac377b1a3f144d5e9230636608cc9d6fe886bbd4a633c03aefd1674", bytecode = """
program test.aleo;

struct Foo:
    a as u128;
    b as u128;

function main:
    input r0 as i8.private;
    input r1 as i16.private;
    input r2 as i32.private;
    input r3 as i64.private;
    input r4 as u8.private;
    input r5 as u16.private;
    input r6 as u32.private;
    input r7 as u64.private;
    hash.sha3_384 aleo10qerras5799u6k7rjtc9y3hcwxuykr45qra7x7dp6jgnc0923czqm0lgta into r8 as group;
    hash.sha3_384 1scalar into r9 as group;
    add r8 r9 into r10;
    output r10 as group.private;
""", errors = "", warnings = "" }] }]]
