namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "8e44992dd5fe4fe9e1e522e695ca70d239f3eeccc3728b150ed9364421be09c4", unrolled_ast = "cd8951b5b3c9791bb81eb61524f73bf21c0dce8b559a0c93745e3cac13041596", ssa_ast = "e0780346054727cec32661067ad9c74172249b3d1b2b3b71f083af8854d90258", flattened_ast = "be05bc22288d36dfb5f2b99efaf3d492e0df710514d7e06af3194742f7087cbc", destructured_ast = "fbbd3e5dcd0bf3f8228b533154242c5be88b363deffd28ec8247455a5cb21b97", inlined_ast = "fbbd3e5dcd0bf3f8228b533154242c5be88b363deffd28ec8247455a5cb21b97", dce_ast = "9d377ba31803ce91496fdd956090f4d58189c7e5f941985fc275b4beaeff8f69", bytecode = """
program test.aleo;

struct Foo:
    a as u128;
    b as u128;

function main:
    input r0 as i8.private;
    input r1 as i16.private;
    input r2 as i32.private;
    input r3 as i64.private;
    input r4 as u8.private;
    input r5 as u16.private;
    input r6 as u32.private;
    input r7 as u64.private;
    hash.bhp256 aleo10qerras5799u6k7rjtc9y3hcwxuykr45qra7x7dp6jgnc0923czqm0lgta into r8 as group;
    hash.bhp256 1scalar into r9 as group;
    add r8 r9 into r10;
    output r10 as group.private;
""", errors = "", warnings = "" }] }]]
