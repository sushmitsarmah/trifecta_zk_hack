namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "7bbcf217bccf5513b4bc097816d3554cc4abdd52b729f65fab7cc256bf887797", unrolled_ast = "781ac877eeeb365e1e133dbbf8b577a828f5250188060527e4fb54ca80cca831", ssa_ast = "9d56b396ade35734ce354b3908e362540533fc10738cf3bc3404b5b56fb544de", flattened_ast = "b98f22d3e7bc3b2e108da95d3fece05d3f9cf81da2a9d42ce3ebefc2f5d2e6d6", destructured_ast = "47e73434a9f61c558659b7485c8f32517eb504588c1f5eb58a09d47c9023770c", inlined_ast = "47e73434a9f61c558659b7485c8f32517eb504588c1f5eb58a09d47c9023770c", dce_ast = "9cd2bf42addc7992488265c73182b264aad3af3dc8ea7fed86d314f004824137", bytecode = """
program test.aleo;

struct Foo:
    a as u128;
    b as u128;

function main:
    input r0 as i8.private;
    input r1 as i16.private;
    input r2 as i32.private;
    input r3 as i64.private;
    input r4 as u8.private;
    input r5 as u16.private;
    input r6 as u32.private;
    input r7 as u64.private;
    hash.sha3_512 aleo10qerras5799u6k7rjtc9y3hcwxuykr45qra7x7dp6jgnc0923czqm0lgta into r8 as scalar;
    hash.sha3_512 1scalar into r9 as scalar;
    add r8 r9 into r10;
    output r10 as scalar.private;
""", errors = "", warnings = "" }] }]]
