namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "61fef7bc7d35be574e5f9353c089561c113afe14c755051cdfac56879b67b6f8", unrolled_ast = "72fec4c6c1c2fd6e437a050b90956c81a4b567c539f38629abf27ef5413e156b", ssa_ast = "421ffe03066dba8bc18098ad249c05d10b7efcf507d905f4826f5bd1a86ca13f", flattened_ast = "e5f61f4d67a5e0aa83aea15910ed64d05c9d826f351ca3d79951411703e31f08", destructured_ast = "dff17a15e7980318002036aeacf197443288e06c5ae17711a41e61cb746908b5", inlined_ast = "dff17a15e7980318002036aeacf197443288e06c5ae17711a41e61cb746908b5", dce_ast = "08c934c9acf8e87b79d105e4a82e000ddc2cddbaed080997311001ba0dc687cf", bytecode = """
program test.aleo;

struct Foo:
    a as u128;
    b as u128;

function main:
    input r0 as i8.private;
    input r1 as i16.private;
    input r2 as i32.private;
    input r3 as i64.private;
    input r4 as u8.private;
    input r5 as u16.private;
    input r6 as u32.private;
    input r7 as u64.private;
    hash.bhp1024 aleo10qerras5799u6k7rjtc9y3hcwxuykr45qra7x7dp6jgnc0923czqm0lgta into r8 as field;
    hash.bhp1024 1scalar into r9 as field;
    add r8 r9 into r10;
    output r10 as field.private;
""", errors = "", warnings = "" }] }]]
