namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "e465c1be07416336b57caabc74b8b483025361da199d70aa100ad0fa4f9c053f", unrolled_ast = "abc14f7403ef0ef734fad01f5d0d53752d812ab7c95ee093f01d467f2989781f", ssa_ast = "78f94057f0d14b416b8b6b6fb5ba5cc80b48d807391f7c4780cb82c628409902", flattened_ast = "cb30688e717f752978e1d22bfe35d68f088c8dd2ae25d384da8ce4f50536cf9f", destructured_ast = "c77f75bfbac152443db110f9ef9bf7988d3d9eb71f6e7a03235122818d6608ff", inlined_ast = "c77f75bfbac152443db110f9ef9bf7988d3d9eb71f6e7a03235122818d6608ff", dce_ast = "6c10d0519edf6128c8e4828e62306ce003040efe2ccbaada3a3091ea687e3e6c", bytecode = """
program test.aleo;

struct Foo:
    a as u128;
    b as u128;

function main:
    input r0 as i8.private;
    input r1 as i16.private;
    input r2 as i32.private;
    input r3 as i64.private;
    input r4 as u8.private;
    input r5 as u16.private;
    input r6 as u32.private;
    input r7 as u64.private;
    hash.keccak512 aleo10qerras5799u6k7rjtc9y3hcwxuykr45qra7x7dp6jgnc0923czqm0lgta into r8 as scalar;
    hash.keccak512 1scalar into r9 as scalar;
    add r8 r9 into r10;
    output r10 as scalar.private;
""", errors = "", warnings = "" }] }]]
