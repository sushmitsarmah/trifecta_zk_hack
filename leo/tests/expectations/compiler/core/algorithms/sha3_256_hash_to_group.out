namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "4fff1dad39ccdc2fac22bf0ebf842b65dd44bbe6ef8e7fddb408e040bdca9523", unrolled_ast = "d86eb99877045d71b5f81cfd061da115cfe7e44a0fbaf5e3c504b177f7b1ab27", ssa_ast = "55dbd84ff4900a492c167bb893665e7ddf3492f39ca79681cbb71992342892c4", flattened_ast = "458754cea96112af14e9057968760901286104ddb9a797f394ff4a89ae7f256a", destructured_ast = "2cc3c8b9adc2ba2a58349ac91081019c2210e487efd7a7289ebebbd61b47c8ed", inlined_ast = "2cc3c8b9adc2ba2a58349ac91081019c2210e487efd7a7289ebebbd61b47c8ed", dce_ast = "ab475eff8b94dde673815843dcb41f01fb54989bcca1fcb31653348880e8ce0a", bytecode = """
program test.aleo;

struct Foo:
    a as u128;
    b as u128;

function main:
    input r0 as i8.private;
    input r1 as i16.private;
    input r2 as i32.private;
    input r3 as i64.private;
    input r4 as u8.private;
    input r5 as u16.private;
    input r6 as u32.private;
    input r7 as u64.private;
    hash.sha3_256 aleo10qerras5799u6k7rjtc9y3hcwxuykr45qra7x7dp6jgnc0923czqm0lgta into r8 as group;
    hash.sha3_256 1scalar into r9 as group;
    add r8 r9 into r10;
    output r10 as group.private;
""", errors = "", warnings = "" }] }]]
