namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "16cc9b0724e9b9710a1fb2b2a102bf195cdf67ef04faff80eb44a98684d53287", unrolled_ast = "e3b8368a0b14c9b9f2668f9e71136837ed368727a6fa00dda85d41165035bb50", ssa_ast = "e393f43ae69043428db681b24d0e00c00f1ca5919da89761281c8eb866637754", flattened_ast = "e6d9f1cc780563929747bfbb03ef8f20b524768d89191d6cc1056a6213320ebf", destructured_ast = "f17515b3637f09c339c3c4c9bda0783a55d3ddf5d43aaab1e6240762b72dcfa9", inlined_ast = "f17515b3637f09c339c3c4c9bda0783a55d3ddf5d43aaab1e6240762b72dcfa9", dce_ast = "43078ce8fe2b31ff40ff93fea140764396f05bb766c78e0994f3cb52299efb41", bytecode = """
program test.aleo;

struct Foo:
    a as u128;
    b as u128;

function main:
    input r0 as i8.private;
    input r1 as i16.private;
    input r2 as i32.private;
    input r3 as i64.private;
    input r4 as u8.private;
    input r5 as u16.private;
    input r6 as u32.private;
    input r7 as u64.private;
    hash.bhp512 aleo10qerras5799u6k7rjtc9y3hcwxuykr45qra7x7dp6jgnc0923czqm0lgta into r8 as field;
    hash.bhp512 1scalar into r9 as field;
    add r8 r9 into r10;
    output r10 as field.private;
""", errors = "", warnings = "" }] }]]
