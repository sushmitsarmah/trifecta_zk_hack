namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "4d8dac42b745182842d0699c703b8cd4bb875da014b3d93f993779020f643e59", unrolled_ast = "4d8dac42b745182842d0699c703b8cd4bb875da014b3d93f993779020f643e59", ssa_ast = "198d0af4f4d9aeaab70de4df15b8a15e87078a19d164afeb612c4fac256c7908", flattened_ast = "8e67e164404e6fcbc4918492660dc59572103060be8141be63a058139cfded43", destructured_ast = "58d1e81d725b83b56d365add74a33f083d364f1b9842c639621ea95339605d70", inlined_ast = "58d1e81d725b83b56d365add74a33f083d364f1b9842c639621ea95339605d70", dce_ast = "fbe283e571b7a63ca2d2ac2c0001e1ced041e7ee1866c92c8046138363400239", bytecode = """
program test.aleo;

function main:
    input r0 as boolean.private;
    input r1 as boolean.private;
    not r0 into r2;
    output r2 as boolean.private;
""", errors = "", warnings = "" }] }]]
