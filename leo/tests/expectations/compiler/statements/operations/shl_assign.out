namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "9ee78cbd65beec132d97110aeba5adea156e75321681cbff6adb04d2e3f947c4", unrolled_ast = "9ee78cbd65beec132d97110aeba5adea156e75321681cbff6adb04d2e3f947c4", ssa_ast = "f47344badbc0f56cf32fa8d5ec2766452f1bf1e529e906157e3faf6a852538e9", flattened_ast = "53511fb990cf9ddab8c8331d50836d99f5ef3c42647e996e1e9fddb8559defe5", destructured_ast = "aa622b8e204f1d29a0800e019c65a9c33358385e9ff0ba9dfd0cbf9d92b6f869", inlined_ast = "aa622b8e204f1d29a0800e019c65a9c33358385e9ff0ba9dfd0cbf9d92b6f869", dce_ast = "aa622b8e204f1d29a0800e019c65a9c33358385e9ff0ba9dfd0cbf9d92b6f869", bytecode = """
program test.aleo;

function unsigned:
    input r0 as u8.private;
    input r1 as u8.private;
    input r2 as u16.private;
    input r3 as u32.private;
    shl r0 r1 into r4;
    shl r4 r2 into r5;
    shl r5 r3 into r6;
    output r6 as u8.private;

closure signed:
    input r0 as i8;
    input r1 as u8;
    input r2 as u16;
    input r3 as u32;
    shl r0 r1 into r4;
    shl r4 r2 into r5;
    shl r5 r3 into r6;
    output r6 as i8;
""", errors = "", warnings = "" }] }]]
