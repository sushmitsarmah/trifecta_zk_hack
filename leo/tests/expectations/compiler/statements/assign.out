namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "6019b8c22dc3784fa95210eecf929efcb66246ce03f9ae5d867e187d4bcc8788", unrolled_ast = "6019b8c22dc3784fa95210eecf929efcb66246ce03f9ae5d867e187d4bcc8788", ssa_ast = "fe7e915193461f768fdf91bf468873c767d5f6b6964a2f36fc5b47018aca2472", flattened_ast = "8a821b2ed86abdf4344ec3e58b1f13cfa8d42cd2fbcd692b60b975ff968df287", destructured_ast = "c3d78a54d7b38b9e47ef92ab94d93d3530f94f28d14a9a105d00686e750ca862", inlined_ast = "c3d78a54d7b38b9e47ef92ab94d93d3530f94f28d14a9a105d00686e750ca862", dce_ast = "f06f4f184c5dad19a346fdcf168240765bda3758ace5f0b80451c60adf544374", bytecode = """
program test.aleo;

function main:
    input r0 as u8.private;
    input r1 as u8.private;
    is.eq r0 0u8 into r2;
    add r1 1u8 into r3;
    add r1 2u8 into r4;
    ternary r2 r3 r4 into r5;
    ternary r2 r3 r5 into r6;
    output r6 as u8.private;
""", errors = "", warnings = "" }] }]]
