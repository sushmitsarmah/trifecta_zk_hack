namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "bbcf9d2685d85c7655c97568ff51cb46dd1aee6ee92af6eb4b9ef6b917ce928e", unrolled_ast = "bbcf9d2685d85c7655c97568ff51cb46dd1aee6ee92af6eb4b9ef6b917ce928e", ssa_ast = "d9f3b16b2a063335a36b56798ffaf578d6f04fbe70003ec15a30783590c1dce4", flattened_ast = "9ce05cb73e1f012bada5972095cc1c0602d96bd63a4fe58029f2c073a8eab51c", destructured_ast = "690ca5d32129c085b7897ff25c87a8a95cfc0cf35cec0f3d5742aa68ef4a1a31", inlined_ast = "690ca5d32129c085b7897ff25c87a8a95cfc0cf35cec0f3d5742aa68ef4a1a31", dce_ast = "4bbb3efdf7be6bd5d87995ed2787265dca604575a2b898a7a9cbe0b889bc235b", bytecode = """
program test.aleo;

function main:
    input r0 as u32.private;
    is.eq r0 3u32 into r1;
    ternary r1 true false into r2;
    output r2 as boolean.private;
""", errors = "", warnings = "" }] }]]
