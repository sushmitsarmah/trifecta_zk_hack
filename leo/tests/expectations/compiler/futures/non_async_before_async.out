namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [
    { initial_ast = "5a07ca97b09d15a8549692408a74444dc346fbd3c8d08b1e3fa4dc60d2a0a05c", unrolled_ast = "5a07ca97b09d15a8549692408a74444dc346fbd3c8d08b1e3fa4dc60d2a0a05c", ssa_ast = "50c140777b792e917824e9021e722774b3e037f2d97c9d0c59a14b2c5088c98b", flattened_ast = "f6f59f2f6e0f8b8c933ecdb0d2360cd9c53a2ba10486c2935f72140b48b68927", destructured_ast = "f5851f2b9ebf08030bf8a9778e0c52c85f61b0a32f3eed802897da99c48a29bd", inlined_ast = "8051736585fdd624f74052e44368eef86e1a7e9533152406503a5737939c4e1e", dce_ast = "8051736585fdd624f74052e44368eef86e1a7e9533152406503a5737939c4e1e", bytecode = """
program test.aleo;

mapping foo:
    key as u32.public;
    value as u32.public;

function main_inner:
    input r0 as u32.public;
    input r1 as u32.public;
    async main_inner r0 r1 into r2;
    output r2 as test.aleo/main_inner.future;

finalize main_inner:
    input r0 as u32.public;
    input r1 as u32.public;
    set r1 into foo[r0];

function baz:
    input r0 as u32.private;
    input r1 as u32.private;
    add r0 r1 into r2;
    output r2 as u32.private;
""", errors = "", warnings = "" },
    { initial_ast = "959ef8008a2cb837e0f067c6954356034892bed1a8dcda72224f08e360a1c791", unrolled_ast = "16d8f807e713ffc02c41e1e1c2b8f983877da24be7844f2daed7de7928ecaa70", ssa_ast = "e0ab686b156b3eeeef7dc4ee4771741aec683e0d735f930147e1646fb2bde2ee", flattened_ast = "1569d6a885fcacd1932bb0a1e93b1f5238220702f8d56f83148e376ea32aa505", destructured_ast = "d21d5b30759d35f86fd0ee6b68a097072cec3426a8c9fcf3279a449bee48ffd0", inlined_ast = "7e30b1fc156ff5ccf82639ae11419a4bf465ea4a6798d4ed399caa49d44de0da", dce_ast = "7e30b1fc156ff5ccf82639ae11419a4bf465ea4a6798d4ed399caa49d44de0da", bytecode = """
import test.aleo;
program basic.aleo;

function main:
    input r0 as u32.public;
    input r1 as u32.private;
    call test.aleo/baz r0 r1 into r2;
    assert.eq r2 1u32;
    call test.aleo/main_inner 0u32 0u32 into r3;
    call test.aleo/baz r0 r1 into r4;
    assert.eq r4 1u32;
    call test.aleo/main_inner 1u32 1u32 into r5;
    call test.aleo/baz r0 r1 into r6;
    assert.eq r6 1u32;
    async main r3 r5 into r7;
    output r7 as basic.aleo/main.future;

finalize main:
    input r0 as test.aleo/main_inner.future;
    input r1 as test.aleo/main_inner.future;
    await r0;
    await r1;
""", errors = "", warnings = "" },
] }]]
