namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [
    { initial_ast = "097f10d87647d844617c056c30f24c84d7c8f1ce039dcdffcd43087e5f03c071", unrolled_ast = "097f10d87647d844617c056c30f24c84d7c8f1ce039dcdffcd43087e5f03c071", ssa_ast = "1e22ea418facff5d568b7990eccf47d9c673fe73836619271b05da0aa7c22b4a", flattened_ast = "e6b6643bf7a2f42f2352cd36adb8bf1c783501cdab10b0b8e44e58941d65b373", destructured_ast = "7a93fc18087bdafe80684129998d2343533777c70127b223e2500dd799da776f", inlined_ast = "bcfef5f41213095660d8311021847eecf0d139a470ab5007a80e9c830b812c5b", dce_ast = "99e24cb567629f64e67eab746a07afdcf3b9c0f3650f91de04b04386d38cfccd", bytecode = """
program test_dep.aleo;

record yeets:
    owner as address.private;
    val as u32.private;

mapping Yo:
    key as u32.public;
    value as u32.public;

function main_dep:
    input r0 as u32.private;
    async main_dep r0 1u32 into r1;
    cast self.caller 1u32 into r2 as yeets.record;
    output r2 as yeets.record;
    output r1 as test_dep.aleo/main_dep.future;

finalize main_dep:
    input r0 as u32.public;
    input r1 as u32.public;
    set r1 into Yo[r0];

function main_dep_2:
    input r0 as u32.private;
    async main_dep_2 into r1;
    cast self.caller 1u32 into r2 as yeets.record;
    output r2 as yeets.record;
    output r1 as test_dep.aleo/main_dep_2.future;

finalize main_dep_2:
    set 1u32 into Yo[1u32];
""", errors = "", warnings = "" },
    { initial_ast = "bcfa98eafaf355e7313773fa4340b88d2530e3d2b279252fc1117327de42d77a", unrolled_ast = "ec5de9ecae8c4179db66b09d97f2cf78d2c47b0d78f30471eba009ebd8bca2f9", ssa_ast = "4e6424641907c1b2b833550903cea09df7efbc3f459443aa199ba830eb4e2446", flattened_ast = "e0b606fb7342cb68c4a3231ef62d9e61c3cdf772754329cc15f0ac6b7a4adf3a", destructured_ast = "854ca3180d0c3242f3f3de636435a4fb61be10571f0ddc563e340e8bb4897271", inlined_ast = "c0e035e3546a10c1491fd2bcd46fa18630dd48aa9708adc7998f758424d8eaff", dce_ast = "6bf17cf0441ec83a95aef9a814b91e954cb81b7b5f72c6333fd1ded25d0c9f50", bytecode = """
import test_dep.aleo;
program test.aleo;

mapping ayo:
    key as u32.public;
    value as u32.public;

function main:
    input r0 as u32.private;
    call test_dep.aleo/main_dep 10u32 into r1 r2;
    call test_dep.aleo/main_dep 1u32 into r3 r4;
    async main r2 r4 1u32 into r5;
    add r2[0u32] r4[0u32] into r6;
    add r6 1u32 into r7;
    add r7 r2[0u32] into r8;
    mul r2[0u32] 2u32 into r9;
    add r8 r9 into r10;
    output r10 as u32.private;
    output r5 as test.aleo/main.future;

finalize main:
    input r0 as test_dep.aleo/main_dep.future;
    input r1 as test_dep.aleo/main_dep.future;
    input r2 as u32.public;
    is.eq r2 1u32 into r3;
    branch.eq r3 false to end_then_0_0;
    await r0;
    await r1;
    branch.eq true true to end_otherwise_0_1;
    position end_then_0_0;
    position end_otherwise_0_1;
    is.eq r2 2u32 into r4;
    branch.eq r4 false to end_then_0_2;
    set 1u32 into ayo[1u32];
    branch.eq true true to end_otherwise_0_3;
    position end_then_0_2;
    position end_otherwise_0_3;
    add r0[0u32] r1[0u32] into r5;
    set r5 into ayo[1u32];
""", errors = "", warnings = """
Warning [WSAZ0374000]: Not all paths through the function await all futures. 2/4 paths contain at least one future that is never awaited.
    --> compiler-test:17:5
     |
  17 |     async function finalize_main(f: Future, f2: Future, a: u32) {
  18 |         // f.await();
  19 |         if a == 1u32 {
  20 |             Future::await(f);
  21 |             f2.await();
  22 |         }
  23 | 
  24 |         if a == 2u32 {
  25 |             //f2.await();
  26 |             Mapping::set(ayo, 1u32, 1u32);
  27 |         }
  28 | 
  29 |         let total: u32 = f.0 + f2.0;
  30 |         Mapping::set(ayo, 1u32, total);
  31 |     }
     |     ^
     |
     = Ex: `f.await()` to await a future. Remove this warning by including the `--disable-conditional-branch-type-checking` flag.""" },
    { initial_ast = "856e56d95eaf14f6e9241001763546b7d982402ac87521e2ec3b7ea476764692", unrolled_ast = "39564a832636212ab5660967aa2346bb2a06a21c5d5a23330fab50cda53561e5", ssa_ast = "e70516ecf52419fb75ee2a870f5c7b0c2a9d47479402b05328ca7870625f4802", flattened_ast = "d9d4507bf24824a216cb502ccead13491180d6c7e0be317ba92c31b79697f3e8", destructured_ast = "f3ce67b6ee4b3b992f2ab2d73ed8f21cfee73d18ccf8d1e4acf011d3407cefc9", inlined_ast = "f2c4a7a51cbc05963cb472a9bae05a7ef87837178ada3e6501c318eb7465ffa2", dce_ast = "351f7f5e3dbdf29e67df1e43b1e9b9cabaf21c9b24c417dc36e0191154501adf", bytecode = """
import test_dep.aleo;
import test.aleo;
program wrapper.aleo;

function main:
    input r0 as u32.public;
    input r1 as u32.private;
    call test.aleo/main 1u32 into r2 r3;
    call test.aleo/main 1u32 into r4 r5;
    call test.aleo/main 1u32 into r6 r7;
    async main r3 r5 r7 into r8;
    output r2 as u32.private;
    output r8 as wrapper.aleo/main.future;

finalize main:
    input r0 as test.aleo/main.future;
    input r1 as test.aleo/main.future;
    input r2 as test.aleo/main.future;
    await r0;
    await r1;
    await r2;
""", errors = "", warnings = "" },
    { initial_ast = "575e251f07e552c917ab36bc9877b13dd1638651c4023ade20701dd2a5fe27ff", unrolled_ast = "9f6e341a877131a37f31534ecc0c70fa5e189d24f95ab5f99eeed1a3be24b5e0", ssa_ast = "f164dae15de955cb5b29024f02e7fe2db84040af5bf438b0b0ee83e8367837a7", flattened_ast = "0abc2d9d7f4d2b453c4df66edf6fe897e3a0ee513776294fee0521f8541d24af", destructured_ast = "32af7f15780ac28a3a564f56a8857896019140e882b34ec219b1ad0683df6d76", inlined_ast = "1a2c2a09ee2915054f2baa5945ec2b2ce4221a5ddee49062fc981f85cd3044eb", dce_ast = "97f3f614faee7d99e4a78e02f7957054dff9d83eceae600415d1dd57e082e9fb", bytecode = """
import test_dep.aleo;
import test.aleo;
import wrapper.aleo;
program big_wrapper.aleo;

function main:
    input r0 as u32.public;
    input r1 as u32.private;
    call wrapper.aleo/main 10u32 10u32 into r2 r3;
    async main r3 into r4;
    output r4[0u32][0u32][0u32][0u32] as u32.private;
    output r4 as big_wrapper.aleo/main.future;

finalize main:
    input r0 as wrapper.aleo/main.future;
    await r0;
""", errors = "", warnings = "" },
] }]]
