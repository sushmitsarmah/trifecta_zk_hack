namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [
    { initial_ast = "2bfe467a04d427a79a28ef4029ccebdb3cb0eddf0b37e6b33dbdbe2063aa67bc", unrolled_ast = "2bfe467a04d427a79a28ef4029ccebdb3cb0eddf0b37e6b33dbdbe2063aa67bc", ssa_ast = "658fe90229b11769bc01e033f7833960f756b09e082ea0542b270acb4c1ee71b", flattened_ast = "6e131dfaa409eaec17bd67acc1b1ac4611fdb5deb1686f70f8bc34327ab10648", destructured_ast = "dc160ce86c6b05e46449a72e5ed1d1b9e932693d28f430940442fd5df2354143", inlined_ast = "43a6c945bdcf715ee62ef3eb62df9fa922c2f9f848c8989438514a05d4fd2101", dce_ast = "43a6c945bdcf715ee62ef3eb62df9fa922c2f9f848c8989438514a05d4fd2101", bytecode = """
program test.aleo;

mapping foo:
    key as u32.public;
    value as u32.public;

function main_inner:
    input r0 as u32.public;
    input r1 as u32.private;
    add r0 r1 into r2;
    async main_inner 1u32 into r3;
    output r2 as u32.private;
    output r3 as test.aleo/main_inner.future;

finalize main_inner:
    input r0 as u32.public;
    set 1u32 into foo[r0];
""", errors = "", warnings = "" },
    { initial_ast = "f4b27c45b21e659b2b730a167dbbf8a309b19e71beded7108cb7267b06177417", unrolled_ast = "4929778f99c5ca28a7cb7cc341a478fd4ccd27d9166babccb7e0694488bfaeb9", ssa_ast = "0ae65a4a3314d415e7d49878dd1ac6f8b1f41dba5a8eaae9d377f673703d191e", flattened_ast = "c7454da423589fa28a290a5219deb1f4c38ef9e239fe5462db49e372feaaddc1", destructured_ast = "a9684a6c9cb8044143d9fe1106c4fae67bdda15d954097f922f77dcf47653ed6", inlined_ast = "d2451808c3accd6f22d458990461927238cf2093c16cda653ac9c58ecff6bd5a", dce_ast = "45b029782caf3e5e0478afab60b7bf2582a442d31f9fb53ed1087dc617e6d186", bytecode = """
import test.aleo;
program basic.aleo;

function main:
    input r0 as u32.public;
    input r1 as u32.private;
    add r0 r1 into r2;
    call test.aleo/main_inner 1u32 1u32 into r3 r4;
    async main r0 r2 r4 into r5;
    output r2 as u32.private;
    output r5 as basic.aleo/main.future;

finalize main:
    input r0 as u32.public;
    input r1 as u32.public;
    input r2 as test.aleo/main_inner.future;
    await r2;
    assert.eq r0 r1;
""", errors = "", warnings = "" },
] }]]
