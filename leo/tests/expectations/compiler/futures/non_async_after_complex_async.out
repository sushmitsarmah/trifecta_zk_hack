namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [
    { initial_ast = "242372b2feb8f6e98c77aa4bb4a891130a5ceb5c07ec724cce9c4dde4fd49208", unrolled_ast = "242372b2feb8f6e98c77aa4bb4a891130a5ceb5c07ec724cce9c4dde4fd49208", ssa_ast = "2787cc66971dcd0423755380ff9f4adc0a4ec03825407ff9fda2f2c731179c75", flattened_ast = "cf44ace46cbe7e60114c27ac8c6fbbdd2097f599134bdfe37822f3d4093b9f8a", destructured_ast = "72f55596cce2dab4e8fd8f2a8eff12931cd159f6eb5585dc13334ff20ad36f87", inlined_ast = "fc67b7df09f254e6c1fd19bc3005be38ce306eea369efa384ecba6b38639a638", dce_ast = "fc67b7df09f254e6c1fd19bc3005be38ce306eea369efa384ecba6b38639a638", bytecode = """
program inner.aleo;

mapping foo:
    key as u32.public;
    value as u32.public;

function inner:
    input r0 as u32.private;
    async inner r0 into r1;
    output r1 as inner.aleo/inner.future;

finalize inner:
    input r0 as u32.public;
    set r0 into foo[0u32];
""", errors = "", warnings = "" },
    { initial_ast = "f25d550819ceefd793a9711f96460c97c78ca1aeb7da21d3105dbcb06020ea8f", unrolled_ast = "fa8726807953cf456f5d0bc05dcbeeb686bdd52793424450bcb21aa80e0065c8", ssa_ast = "62a77745057616c095a8563231c3529818bc6456ed8d41c4fe4b091daeffe423", flattened_ast = "0ac7e6b15ecdf0824e08eec260d9ffad411c3766ef87acb75e457ef1e7992a67", destructured_ast = "42860f535ef4aa65db02430142e2422befe3c32bd373949a05efd898f5a1ca43", inlined_ast = "c667f4d218d39e5b8194cbcef5d566b269b1c2c61714085d905c301584e99166", dce_ast = "c667f4d218d39e5b8194cbcef5d566b269b1c2c61714085d905c301584e99166", bytecode = """
import inner.aleo;
program mid.aleo;

function mid:
    input r0 as u32.private;
    call inner.aleo/inner 0u32 into r1;
    call inner.aleo/inner 1u32 into r2;
    async mid r2 r1 into r3;
    output r3 as mid.aleo/mid.future;

finalize mid:
    input r0 as inner.aleo/inner.future;
    input r1 as inner.aleo/inner.future;
    await r0;
    await r1;

function dummy:
""", errors = "", warnings = "" },
    { initial_ast = "5df535c99668c958f5649f0e5d24ae951023b165941ded5e9df3665a1c4bdd7d", unrolled_ast = "a57c050d190c7736d66bf8b619c9343eadee054fb702d2d181679988582dd1a7", ssa_ast = "ebdcdfb1fd290cd8ba985454f66ea78e790a9d243932089daf8571b86d5872b8", flattened_ast = "ba40596f7f84b8412f7ac11ea4dc8920069d0e5c0ef1d3eefc1f7c19eca98cb1", destructured_ast = "ba1de377fbc16d23dd5fe5eaaba7edd85359f0cfc37db7f7575730a79250fd0c", inlined_ast = "942b959ad172f6502c27b534b31aa4ba5ff41529b7ea310e2bd9d12746df6e32", dce_ast = "942b959ad172f6502c27b534b31aa4ba5ff41529b7ea310e2bd9d12746df6e32", bytecode = """
import inner.aleo;
import mid.aleo;
program outer.aleo;

function outer:
    input r0 as u32.private;
    call mid.aleo/mid 0u32 into r1;
    call mid.aleo/mid 1u32 into r2;
    call mid.aleo/dummy;
    async outer r1 r2 into r3;
    output r3 as outer.aleo/outer.future;

finalize outer:
    input r0 as mid.aleo/mid.future;
    input r1 as mid.aleo/mid.future;
    await r0;
    await r1;
""", errors = "", warnings = "" },
] }]]
