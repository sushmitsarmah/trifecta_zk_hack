namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [
    { initial_ast = "328918d0b3dd6923b30d9ce7404976121e3dd96f32210e9fb514726faef7c2ef", unrolled_ast = "328918d0b3dd6923b30d9ce7404976121e3dd96f32210e9fb514726faef7c2ef", ssa_ast = "a29765973d8c7313f07a01152b5581c3a4a3c1267884e05a7fa16baf4d7eda9a", flattened_ast = "6c44e51bc580168e9f278da0e3a18813f062be0987e0b3011dab7bbdf0194b21", destructured_ast = "6a0ef2c464ec65e4d9f0f4a6d235e8212999712c19f967c6224a67899f42295b", inlined_ast = "2cfb650c684c9932c879bb78fcbc37d602d1ed8068af087b32b0a9e66084e4b1", dce_ast = "86830ad8e03a76f370944f3b12a6fe11ec4db8a520ee7e0e18ab7ec1c4986efb", bytecode = """
program test_dep.aleo;

record yeets:
    owner as address.private;
    val as u32.private;

mapping Yo:
    key as u32.public;
    value as u32.public;

function main_dep:
    input r0 as u32.private;
    async main_dep r0 1u32 into r1;
    cast self.caller 1u32 into r2 as yeets.record;
    output r2 as yeets.record;
    output r1 as test_dep.aleo/main_dep.future;

finalize main_dep:
    input r0 as u32.public;
    input r1 as u32.public;
    set r1 into Yo[r0];
""", errors = "", warnings = "" },
    { initial_ast = "64089bd9ecc0ab9ce224328c7ba9b2ece577f585b2417b48eb0883ec8cec304c", unrolled_ast = "87332400b418ba69369868f3dc23ffc308ba69c8d74bf825fd8da32c7e00be6d", ssa_ast = "0ce0a7467c76051fc71ac74315909d6cd9a663cb9247dab9099d0bd42e81c0fe", flattened_ast = "ca776bbca2219779eeb9f9870e41185d772b82762dd675f94b68ff6ede70e561", destructured_ast = "56ec18b2246b34369b214368d4396726c6ba0416a96d5b2c58ab0520f0fef8e7", inlined_ast = "cd07bcd80b6777533d9a98ff332e48447eeac1f9d2b3b4b0d4183c66391f3cd7", dce_ast = "7a457fa10bf56068ece62ca38c3f23968c37ecef0dfd9a2768e3091713018fc7", bytecode = """
import test_dep.aleo;
program test.aleo;

mapping ayo:
    key as u32.public;
    value as u32.public;

function main:
    input r0 as u32.private;
    call test_dep.aleo/main_dep 10u32 into r1 r2;
    call test_dep.aleo/main_dep 1u32 into r3 r4;
    async main r2 r4 1u32 into r5;
    add r2[0u32] r4[0u32] into r6;
    add r6 1u32 into r7;
    add r7 r2[0u32] into r8;
    mul r2[0u32] 2u32 into r9;
    add r8 r9 into r10;
    output r10 as u32.private;
    output r5 as test.aleo/main.future;

finalize main:
    input r0 as test_dep.aleo/main_dep.future;
    input r1 as test_dep.aleo/main_dep.future;
    input r2 as u32.public;
    is.eq r2 1u32 into r3;
    branch.eq r3 false to end_then_0_0;
    await r0;
    await r1;
    branch.eq true true to end_otherwise_0_1;
    position end_then_0_0;
    position end_otherwise_0_1;
    is.eq r2 2u32 into r4;
    branch.eq r4 false to end_then_0_2;
    set 1u32 into ayo[1u32];
    branch.eq true true to end_otherwise_0_3;
    position end_then_0_2;
    position end_otherwise_0_3;
    add r0[0u32] r1[0u32] into r5;
    set r5 into ayo[1u32];
""", errors = "", warnings = """
Warning [WSAZ0374000]: Not all paths through the function await all futures. 2/4 paths contain at least one future that is never awaited.
    --> compiler-test:17:5
     |
  17 |     async function finalize_main(f: Future, f2: Future, a: u32) {
  18 |         // f.await();
  19 |         if a == 1u32 {
  20 |             Future::await(f);
  21 |             f2.await();
  22 |         }
  23 | 
  24 |         if a == 2u32 {
  25 |             //f2.await();
  26 |             Mapping::set(ayo, 1u32, 1u32);
  27 |         }
  28 | 
  29 |         let total: u32 = f.0 + f2.0;
  30 |         Mapping::set(ayo, 1u32, total);
  31 |     }
     |     ^
     |
     = Ex: `f.await()` to await a future. Remove this warning by including the `--disable-conditional-branch-type-checking` flag.""" },
    { initial_ast = "05de2b0dcfd85ec6446f4507492e26b2093e771f44c497f92a24d6fff5e8c864", unrolled_ast = "f40986b029b7e164fd6587b25a06c8c8db90cc0cc73016ff9e04f50c9ac264a0", ssa_ast = "67bb7ad18e91eac296c02c3eca94935c70d19c577cb363cf8a57334b1501d8d4", flattened_ast = "ea01e46718e83289c1f725925066fe1f6f800456f41861eda69464db8c11b332", destructured_ast = "373d530408e1186b87619368bcf6c9b5baeaaabba0dbcb47307df99882dfd4a6", inlined_ast = "f3e7538b67a3c35307fa088e0e0894e575c5a8ee9335f4217d884a17de98b779", dce_ast = "4593925d26dda77c1c3e154328c5a5a519c143bce39c668f63cd99cb4145125c", bytecode = """
import test_dep.aleo;
import test.aleo;
program wrapper.aleo;

function main:
    input r0 as u32.public;
    input r1 as u32.private;
    call test.aleo/main 1u32 into r2 r3;
    call test.aleo/main 1u32 into r4 r5;
    call test.aleo/main 1u32 into r6 r7;
    async main r3 r5 r7 into r8;
    output r2 as u32.private;
    output r8 as wrapper.aleo/main.future;

finalize main:
    input r0 as test.aleo/main.future;
    input r1 as test.aleo/main.future;
    input r2 as test.aleo/main.future;
    await r0;
    await r1;
    await r2;
""", errors = "", warnings = "" },
    { initial_ast = "bf4f5dac2e3cac6f6c8b117a93b7bc9a4b9d31f66b3b0d946866da23003e6a69", unrolled_ast = "669f4addea17babaa6505d92144a4ec1673b84528c3a5d598247241271e9c87b", ssa_ast = "5374009a0e414802bfbc907b702dbf825a940ada055260b210a6d4267eb301a1", flattened_ast = "7313abba665ae2b635294dc80af0c4ad62bb701efd7880da29d72318cc79bd41", destructured_ast = "0171d4cceffd23d1718b9c9b6e2e8371bc3ab88eb366d210e1f2f2953693342a", inlined_ast = "ef6dc6f93962d9d1d5c0276c0fb7e3914eb0edd44156505c7a5b14dbdc4db932", dce_ast = "13b14feeb9d391e6e7688484cdb2f5856bc81bfe80472497f572080ed3042bdb", bytecode = """
import test_dep.aleo;
import test.aleo;
import wrapper.aleo;
program big_wrapper.aleo;

function main:
    input r0 as u32.public;
    input r1 as u32.private;
    call wrapper.aleo/main 10u32 10u32 into r2 r3;
    async main r3 into r4;
    output r4[0u32][0u32][0u32][0u32] as u32.private;
    output r4 as big_wrapper.aleo/main.future;

finalize main:
    input r0 as wrapper.aleo/main.future;
    await r0;
""", errors = "", warnings = "" },
] }]]
