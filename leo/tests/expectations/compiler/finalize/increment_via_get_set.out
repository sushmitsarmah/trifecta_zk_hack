namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "9d5c2907ec4f8e31ef23d56bf23d0aeda97d2993ff485319d5b1e20d22b408b3", unrolled_ast = "9d5c2907ec4f8e31ef23d56bf23d0aeda97d2993ff485319d5b1e20d22b408b3", ssa_ast = "4f56e27bc3b09d665061f61079b37c96aa61e473476830185b498813b86b11e0", flattened_ast = "94657074440a8a7ed9c20787ed50c44f2e8cb0ac9231d0273ae2a7611cc64d99", destructured_ast = "91f4d7d2f66c3547aa8bc80af99a0a3519b662e2730932fa5fb66dabcba0a017", inlined_ast = "f3e27451be8d7ab875d3b4cfab04b5d5e5607ec1a789a529a82693a7a632d547", dce_ast = "f3e27451be8d7ab875d3b4cfab04b5d5e5607ec1a789a529a82693a7a632d547", bytecode = """
program test.aleo;

mapping amounts:
    key as address.public;
    value as u128.public;

function increase_self:
    input r0 as u128.private;
    async increase_self self.caller r0 into r1;
    output r1 as test.aleo/increase_self.future;

finalize increase_self:
    input r0 as address.public;
    input r1 as u128.public;
    get.or_use amounts[r0] 0u128 into r2;
    add r2 r1 into r3;
    set r3 into amounts[r0];
""", errors = "", warnings = "" }] }]]
