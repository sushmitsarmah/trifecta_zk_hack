namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "7c9e3e2bce2a78db910de8b7f09d594a9bfbce2d7d0a8cc5e837e55c0d81d9dd", unrolled_ast = "7c9e3e2bce2a78db910de8b7f09d594a9bfbce2d7d0a8cc5e837e55c0d81d9dd", ssa_ast = "6954318972ae7c5650dc285d6bdf92e1f031b22ab6c2d6ec766e3be96a76aa30", flattened_ast = "0600e1a04472460af1dc67e6062b68ccdeff612daf2a91b57089976d3394557e", destructured_ast = "8113445426edebba308048ff8bb437c4547925f01cca86b15faa523a65dcd5b1", inlined_ast = "0cc62bf540dbd73e23c7f8872bcf561972bae8c005d8d30ba81fc0890cbcbd93", dce_ast = "0cc62bf540dbd73e23c7f8872bcf561972bae8c005d8d30ba81fc0890cbcbd93", bytecode = """
program test.aleo;

struct TokenInfo:
    id as u64;

mapping token_name_to_info:
    key as field.public;
    value as TokenInfo.public;

function add_new_token:
    async add_new_token into r0;
    output r0 as test.aleo/add_new_token.future;

finalize add_new_token:
    branch.eq false false to end_then_0_0;
    branch.eq true true to end_otherwise_0_1;
    position end_then_0_0;
    position end_otherwise_0_1;
    branch.eq false false to end_then_0_2;
    branch.eq true false to end_then_1_4;
    branch.eq true true to end_otherwise_1_5;
    position end_then_1_4;
    position end_otherwise_1_5;
    cast 0u64 into r0 as TokenInfo;
    set r0 into token_name_to_info[0field];
    branch.eq true true to end_otherwise_0_3;
    position end_then_0_2;
    position end_otherwise_0_3;

function add_new_token_2:
    async add_new_token_2 into r0;
    output r0 as test.aleo/add_new_token_2.future;

finalize add_new_token_2:
    cast 0u64 into r0 as TokenInfo;
    get.or_use token_name_to_info[0field] r0 into r1;
    is.eq r1.id 0u64 into r2;
    cast 10u64 into r3 as TokenInfo;
    ternary r2 r3.id r1.id into r4;
    cast r4 into r5 as TokenInfo;
""", errors = "", warnings = "" }] }]]
