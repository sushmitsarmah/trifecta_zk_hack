namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "a89a16051233f4b1f4c9b6e803a703526409f2e1245ac13aca2dff7835be040f", unrolled_ast = "a89a16051233f4b1f4c9b6e803a703526409f2e1245ac13aca2dff7835be040f", ssa_ast = "e6ac9289d21e1edfe4c7e77802054a95197c7f99a40de906670cb94458c3b7f8", flattened_ast = "1618fff2d37f320945a9a84ef77aa77d6a52889a59e7920cf3f482cb97f3b956", destructured_ast = "485360b2120f7ab866f3c24cde17e8cf5f138a50b1e5cf5b4f4b6c68dd8888f6", inlined_ast = "485360b2120f7ab866f3c24cde17e8cf5f138a50b1e5cf5b4f4b6c68dd8888f6", dce_ast = "5b1e97afe4bf09c18a1eac5430aa9b98977009350347cf397d18df23837117c4", bytecode = """
program test.aleo;

function main:
    input r0 as address.private;
    input r1 as boolean.private;
    input r2 as field.private;
    input r3 as i8.private;
    input r4 as i16.private;
    input r5 as i64.private;
    input r6 as i128.private;
    input r7 as u8.private;
    input r8 as u16.private;
    input r9 as u32.private;
    input r10 as u64.private;
    input r11 as u128.private;
    input r12 as scalar.private;
    cast r11 into r13 as field;
    cast r12 into r14 as field;
    is.eq r13 r14 into r15;
    output r15 as boolean.private;
""", errors = "", warnings = "" }] }]]
