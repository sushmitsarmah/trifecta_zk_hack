namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "08984708d81bd8c596248ab8d77ce38653a8479679407f3134bcbeebd406f25e", unrolled_ast = "08984708d81bd8c596248ab8d77ce38653a8479679407f3134bcbeebd406f25e", ssa_ast = "54732170d48977af6114f483361ff5784efbca0f148ecc3fc23ff26a16919cbc", flattened_ast = "b3f751879e3e820a6dc1e11f4c1e09a7a4d91ada76d5ffa0822dda82d37b39d0", destructured_ast = "026996b7a2ec5ff49d1f6db2054c2f2178318f1e4bbee471bd4f21a61ed65e8b", inlined_ast = "026996b7a2ec5ff49d1f6db2054c2f2178318f1e4bbee471bd4f21a61ed65e8b", dce_ast = "12d9c436ad74690de1afb37d4e0b5712c1b803dcb83535498cf523e2a5ef9493", bytecode = """
program test.aleo;

struct foo:
    data as field;

function main:
    input r0 as boolean.private;
    input r1 as group.private;
    input r2 as address.private;
    cast r1 into r3 as field;
    cast r3 into r4 as foo;
    cast 1field into r5 as foo;
    cast r2 into r6 as field;
    cast r6 into r7 as foo;
    ternary r0 r4.data r4.data into r8;
    cast r8 into r9 as foo;
    ternary r0 r5.data r7.data into r10;
    cast r10 into r11 as foo;
    output r9 as foo.private;
    output r11 as foo.private;
""", errors = "", warnings = "" }] }]]
