namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "3e0dce3c7ac38e237c811a557ddf5422d92024cd3a2f9a050f5089fb49e1c0d2", unrolled_ast = "3e0dce3c7ac38e237c811a557ddf5422d92024cd3a2f9a050f5089fb49e1c0d2", ssa_ast = "e4e399f95f533afdcd018463d8a27bc573fcc02dfd11b0e32990e690b98584da", flattened_ast = "2b95ef75e175131a082bc796f2b57942c2fb395373c91ef5fbbf1ed70d80a2c3", destructured_ast = "6b932fa3264ea209145cb10679089bb14e6f5e667c8cff3b9adef16424e70646", inlined_ast = "6b932fa3264ea209145cb10679089bb14e6f5e667c8cff3b9adef16424e70646", dce_ast = "23001f440ab4c99e89ac05facdfe45b10206fcc86a80bb11f8108c9b3785151b", bytecode = """
program test.aleo;

function main:
    input r0 as address.private;
    is.neq r0 aleo1fj982yqchhy973kz7e9jk6er7t6qd6jm9anplnlprem507w6lv9spwvfxx into r1;
    output r1 as boolean.private;
""", errors = "", warnings = "" }] }]]
