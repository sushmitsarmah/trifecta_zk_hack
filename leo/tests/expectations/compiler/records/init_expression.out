namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "310149548a9efb068d208e0e6e0595c63fc6fef77fea04c7d53e0a2c5fa263e3", unrolled_ast = "310149548a9efb068d208e0e6e0595c63fc6fef77fea04c7d53e0a2c5fa263e3", ssa_ast = "d8c30ca374c55d961a94e5ee5fa30ff3fd1c761fa13dc526c940d9b38590ec2d", flattened_ast = "762eecfca3d51ab14e1159d67b5e38d73aafb525f5ea0b6897c82d3ca3590673", destructured_ast = "4a1067062cac5f8a907d63946ad00d45cba3b67b19ec56e552d71039ecb9c6d6", inlined_ast = "4a1067062cac5f8a907d63946ad00d45cba3b67b19ec56e552d71039ecb9c6d6", dce_ast = "47d6ee1ecd0eef9090a3dfa79864d89b59cf65c63126aba40a8444cbce9c91be", bytecode = """
program test.aleo;

record Token:
    owner as address.private;
    amount as u64.private;

function mint:
    input r0 as address.private;
    input r1 as u64.private;
    cast r0 r1 into r2 as Token.record;
    output r2 as Token.record;

function main:
    input r0 as address.private;
    mul 1u64 1u64 into r1;
    output r1 as u64.private;
""", errors = "", warnings = "" }] }]]
