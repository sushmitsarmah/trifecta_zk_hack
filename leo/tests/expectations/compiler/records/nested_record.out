namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "d863e7b59dfe59fcd0ba922249e2eb0c315fc73b7fe6d42e958e0dbbac1f2340", unrolled_ast = "d863e7b59dfe59fcd0ba922249e2eb0c315fc73b7fe6d42e958e0dbbac1f2340", ssa_ast = "8814d0124a22f34914389617e5b5e75fe5dc6e0008f7412b086725c118d1af53", flattened_ast = "30d106f24bf58d609adff9f463554e3b2746d2e7447023be0847c3a0055fef81", destructured_ast = "5a9ab78d59ef7449107dcbe49732893c39f6ab044d36bbc3eb8ea3ef13e6777f", inlined_ast = "5a9ab78d59ef7449107dcbe49732893c39f6ab044d36bbc3eb8ea3ef13e6777f", dce_ast = "7587e75f6c122fb5be51187ba59091638358c816d1dce87689f1284cd1be8788", bytecode = """
program test.aleo;

struct Amount:
    amount as u64;
    amt as u64;

record Token:
    owner as address.private;
    amount as Amount.private;

function mint:
    input r0 as address.private;
    input r1 as u64.private;
    cast r1 r1 into r2 as Amount;
    cast r0 r2 into r3 as Token.record;
    output r3 as Token.record;

function main:
    input r0 as address.private;
    add 1u64 1u64 into r1;
    output r1 as u64.private;
""", errors = "", warnings = "" }] }]]
