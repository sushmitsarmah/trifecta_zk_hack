namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "e8986cfdca90fee487bf8f984f6b3f7aeac2dbd312559a3f4f017d3f487cc39a", unrolled_ast = "e8986cfdca90fee487bf8f984f6b3f7aeac2dbd312559a3f4f017d3f487cc39a", ssa_ast = "e6c4ef70820b71babfec205ab842b1e8ef9fa66c9dcac1934479916a6b2b1a1c", flattened_ast = "543ae1d1bae6830181baca181e3d7d10dd2b722efa3477f4aaf8508827e1acff", destructured_ast = "4d657459e4abb30b287a673015de4dc1288b46953449308b222151d5b4db93c2", inlined_ast = "4d657459e4abb30b287a673015de4dc1288b46953449308b222151d5b4db93c2", dce_ast = "4d657459e4abb30b287a673015de4dc1288b46953449308b222151d5b4db93c2", bytecode = """
program test.aleo;

record Token:
    owner as address.private;
    amount as u64.private;

function main:
    input r0 as u64.private;
    input r1 as u64.private;
    add r0 r1 into r2;
    cast self.caller r2 into r3 as Token.record;
    output r3 as Token.record;
""", errors = "", warnings = "" }] }]]
