namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "fd7583fa5c45cf541e66faabbed572400aac55370989a605272f260fad6a3b9c", unrolled_ast = "fd7583fa5c45cf541e66faabbed572400aac55370989a605272f260fad6a3b9c", ssa_ast = "bd59694f39c85c6e7a0111c3c9982ac298841d5e864581b3e33a2d269c5b0879", flattened_ast = "87f985b3385321880074033cf83d3086454deec9530f3b8a6f4359c080b64dc9", destructured_ast = "faeca309b52b721a9de406cbb043e8070271c032b2b43629a6922e836542f125", inlined_ast = "7253ffe11d8fc9dd41bd90d130d8cf223b4da14f0a45f62acb35717beb7ddffe", dce_ast = "774e78b65c89e2cb8c66ab606c448760fb3d8bff7a2497bae2de3453cffdd048", bytecode = """
program test.aleo;

struct Data:
    data as [u8; 2u32];

closure foo:
    input r0 as u8;
    input r1 as u8;
    cast  r0 r1 into r2 as [u8; 2u32];
    cast r2 into r3 as Data;
    cast  r1 r0 into r4 as [u8; 2u32];
    cast r4 into r5 as Data;
    is.eq r0 r1 into r6;
    cast  r3 r5 into r7 as [Data; 2u32];
    mul 2u8 r3.data[0u32] into r8;
    mul 4u8 r5.data[1u32] into r9;
    cast  r8 r9 into r10 as [u8; 2u32];
    cast r10 into r11 as Data;
    cast  r5 r11 into r12 as [Data; 2u32];
    ternary r6 r7[0u32].data[0u32] r12[0u32].data[0u32] into r13;
    ternary r6 r7[0u32].data[1u32] r12[0u32].data[1u32] into r14;
    cast  r13 r14 into r15 as [u8; 2u32];
    cast r15 into r16 as Data;
    ternary r6 r7[1u32].data[0u32] r12[1u32].data[0u32] into r17;
    ternary r6 r7[1u32].data[1u32] r12[1u32].data[1u32] into r18;
    cast  r17 r18 into r19 as [u8; 2u32];
    cast r19 into r20 as Data;
    cast  r16 r20 into r21 as [Data; 2u32];
    output r21 as [Data; 2u32];

function bar:
    input r0 as boolean.private;
    input r1 as boolean.private;
    input r2 as u8.private;
    input r3 as u8.private;
    call foo r2 r3 into r4;
    call foo r4[0u32].data[0u32] r4[1u32].data[1u32] into r5;
    call foo r4[1u32].data[0u32] r4[0u32].data[1u32] into r6;
    call foo r4[0u32].data[1u32] r4[1u32].data[0u32] into r7;
    ternary r1 r6[0u32].data[0u32] r7[0u32].data[0u32] into r8;
    ternary r1 r6[0u32].data[1u32] r7[0u32].data[1u32] into r9;
    cast  r8 r9 into r10 as [u8; 2u32];
    cast r10 into r11 as Data;
    ternary r1 r6[1u32].data[0u32] r7[1u32].data[0u32] into r12;
    ternary r1 r6[1u32].data[1u32] r7[1u32].data[1u32] into r13;
    cast  r12 r13 into r14 as [u8; 2u32];
    cast r14 into r15 as Data;
    cast  r11 r15 into r16 as [Data; 2u32];
    ternary r0 r5[0u32].data[0u32] r16[0u32].data[0u32] into r17;
    ternary r0 r5[0u32].data[1u32] r16[0u32].data[1u32] into r18;
    cast  r17 r18 into r19 as [u8; 2u32];
    cast r19 into r20 as Data;
    ternary r0 r5[1u32].data[0u32] r16[1u32].data[0u32] into r21;
    ternary r0 r5[1u32].data[1u32] r16[1u32].data[1u32] into r22;
    cast  r21 r22 into r23 as [u8; 2u32];
    cast r23 into r24 as Data;
    cast  r20 r24 into r25 as [Data; 2u32];
    output r25 as [Data; 2u32].private;
""", errors = "", warnings = "" }] }]]
