namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "80930ad4cb7f61770ea7357480c75ac2827b4efb16f96e4f0ed8e46516cac7d3", unrolled_ast = "80930ad4cb7f61770ea7357480c75ac2827b4efb16f96e4f0ed8e46516cac7d3", ssa_ast = "fa0d332341ce2232bc73845c04388ed4c4de5273a33bfaf61b392cc0a05bde7b", flattened_ast = "d19a87ce540e4fae4b3fe88b0c26962c40819063f605a9964897d9dbfb222313", destructured_ast = "8a9a86db2c2d736b230ed8e9fb6d5bedc2f1e106c587803d024a34a4ee1a049f", inlined_ast = "31777e8e3f516684cdd5d3c491ef510e43f1abf8f5c52a5b5f43e4f469492616", dce_ast = "a4c1a16d010274fb72cfc5f40297db7856c2515d639fc60efa4dff69605f0c4d", bytecode = """
program test.aleo;

struct Extra:
    c as u8;

struct Data:
    a as u8;
    b as u8;
    c as Extra;

function bar:
    input r0 as boolean.private;
    input r1 as boolean.private;
    input r2 as u8.private;
    input r3 as u8.private;
    cast r2 into r4 as Extra;
    cast r2 r3 r4 into r5 as Data;
    is.eq r2 r3 into r6;
    add r2 r3 into r7;
    sub r2 r3 into r8;
    ternary r6 r2 r7 into r9;
    ternary r6 r3 r8 into r10;
    ternary r6 r5.a r5.a into r11;
    ternary r6 r5.b r5.b into r12;
    ternary r6 r5.c.c r5.c.c into r13;
    cast r13 into r14 as Extra;
    cast r11 r12 r14 into r15 as Data;
    cast r9 into r16 as Extra;
    cast r9 r15.c.c r16 into r17 as Data;
    is.eq r9 r15.c.c into r18;
    add r9 r15.c.c into r19;
    sub r9 r15.c.c into r20;
    ternary r18 r9 r19 into r21;
    ternary r18 r15.c.c r20 into r22;
    ternary r18 r17.a r17.a into r23;
    ternary r18 r17.b r17.b into r24;
    ternary r18 r17.c.c r17.c.c into r25;
    cast r25 into r26 as Extra;
    cast r23 r24 r26 into r27 as Data;
    cast r10 into r28 as Extra;
    cast r10 r15.b r28 into r29 as Data;
    is.eq r10 r15.b into r30;
    add r10 r15.b into r31;
    sub r10 r15.b into r32;
    ternary r30 r10 r31 into r33;
    ternary r30 r15.b r32 into r34;
    ternary r30 r29.a r29.a into r35;
    ternary r30 r29.b r29.b into r36;
    ternary r30 r29.c.c r29.c.c into r37;
    cast r37 into r38 as Extra;
    cast r35 r36 r38 into r39 as Data;
    cast r15.a into r40 as Extra;
    cast r15.a r10 r40 into r41 as Data;
    is.eq r15.a r10 into r42;
    add r15.a r10 into r43;
    sub r15.a r10 into r44;
    ternary r42 r15.a r43 into r45;
    ternary r42 r10 r44 into r46;
    ternary r42 r41.a r41.a into r47;
    ternary r42 r41.b r41.b into r48;
    ternary r42 r41.c.c r41.c.c into r49;
    cast r49 into r50 as Extra;
    cast r47 r48 r50 into r51 as Data;
    ternary r1 r33 r45 into r52;
    ternary r1 r34 r46 into r53;
    ternary r1 r39.a r51.a into r54;
    ternary r1 r39.b r51.b into r55;
    ternary r1 r39.c.c r51.c.c into r56;
    cast r56 into r57 as Extra;
    cast r54 r55 r57 into r58 as Data;
    ternary r0 r21 r52 into r59;
    ternary r0 r22 r53 into r60;
    ternary r0 r27.a r58.a into r61;
    ternary r0 r27.b r58.b into r62;
    ternary r0 r27.c.c r58.c.c into r63;
    cast r63 into r64 as Extra;
    cast r61 r62 r64 into r65 as Data;
    output r59 as u8.private;
    output r60 as u8.private;
    output r65 as Data.private;
""", errors = "", warnings = "" }] }]]
