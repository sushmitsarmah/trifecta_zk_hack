namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "c9a39ba95e3335c1fa6eb924e55371957d21eebefb07c307e48f556d0a80823b", unrolled_ast = "c9a39ba95e3335c1fa6eb924e55371957d21eebefb07c307e48f556d0a80823b", ssa_ast = "020daa90945dd26c4048779015a7bc6b2a3af0570f23c93b94e22cebdf73754b", flattened_ast = "7c76b6b3b5eeaf8841d4002e7675e9bfbd27ae9dd07229701d617689ab49553c", destructured_ast = "12a6bfb9b3bd7a13345014396e276de753ede3a2259bc14c162eeee3de623db1", inlined_ast = "be58baef96b4edcdb15e134e6802d3d2124e785ec9f2d2a7e66dc653e572463b", dce_ast = "43fe34a4712b1904236bcadaa1c6acfe5fc24fba93b056678d17f2f10af0f325", bytecode = """
program test.aleo;

function main:
    input r0 as u32.private;
    input r1 as u32.private;
    input r2 as boolean.private;
    is.neq r0 r1 into r3;
    assert.eq r3 true;
    add r0 r1 into r4;
    sub r0 r1 into r5;
    ternary r2 r4 r5 into r6;
    output r6 as u32.private;
""", errors = "", warnings = "" }] }]]
