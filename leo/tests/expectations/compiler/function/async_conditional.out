namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "e3fe485e8209786c5590d6881dcc0ad85982f971a7aeb30f9afb69b244415ff5", unrolled_ast = "e3fe485e8209786c5590d6881dcc0ad85982f971a7aeb30f9afb69b244415ff5", ssa_ast = "92e0b2be634ec913878397cdc42ea0c58a323de3b0bd60441c3f6472fbbfa215", flattened_ast = "20cb1441dc16d531a3b136325a7c0a1005a28361b0dfa6966dd6152a637083d1", destructured_ast = "9bb1c113f873868c1f7f267d990ddde222bc27b11881d22c5338778b4102e6cd", inlined_ast = "12459acccbe4bf8a06d498644af985e35655f5eddd5492b8e3ebbccfb772f99d", dce_ast = "c2916dd7b7fdcb356370a44aee4758cf919be4dd3e9decf06ab3df08e265dbe0", bytecode = """
program test.aleo;

mapping map:
    key as u32.public;
    value as u32.public;

function main:
    async main 1u32 into r0;
    output r0 as test.aleo/main.future;

finalize main:
    input r0 as u32.public;
    is.eq r0 1u32 into r1;
    branch.eq r1 false to end_then_0_0;
    set 2u32 into map[2u32];
    branch.eq true true to end_otherwise_0_1;
    position end_then_0_0;
    position end_otherwise_0_1;
""", errors = "", warnings = "" }] }]]
