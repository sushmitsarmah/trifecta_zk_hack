namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "aa4a1a0f9e75a5b4b8af1232b601a8901b54421c041d5745df979cb9e668e18c", unrolled_ast = "2b192cc806585ee29c96682a51968a21d90b252e39f2356b0853c096a562c69c", ssa_ast = "81851ac38a2b0a211459f9437788b71da5ae414c3395970238988d3078194bb1", flattened_ast = "0cd789febe780d49d7d86b41784497252eaabcb10dfba7c644726b25f9a5a195", destructured_ast = "1306d11f7c6b8fc2c0b5efc41e0baaa183950f4163ad9ca96b29b2e176cf1cf2", inlined_ast = "1306d11f7c6b8fc2c0b5efc41e0baaa183950f4163ad9ca96b29b2e176cf1cf2", dce_ast = "1306d11f7c6b8fc2c0b5efc41e0baaa183950f4163ad9ca96b29b2e176cf1cf2", bytecode = """
program test.aleo;

struct Board:
    foo as u8;

function main:
    input r0 as u32.public;
    input r1 as u32.private;
    add r0 r1 into r2;
    output r2 as u32.private;

closure win:
    input r0 as Board;
    input r1 as u8;
    assert.eq true true;
    output false as boolean;
""", errors = "", warnings = "" }] }]]
