namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "53b8b645d4d7ff0927780fc8018008808d36b4442113476652e70f6c266e8cda", unrolled_ast = "53b8b645d4d7ff0927780fc8018008808d36b4442113476652e70f6c266e8cda", ssa_ast = "db5ce2216227d15eb0952bd5dfde4f3e50da0f2e21e3949d949e61f8ee4d8811", flattened_ast = "fc9049e078b4fa078189d9b11080df584bc9502d425608fd1e569c1a3642fa8b", destructured_ast = "a6d65ddce050d90d8d253084aa24068e1976e26f04a96110cef71fc841b651ed", inlined_ast = "a6d65ddce050d90d8d253084aa24068e1976e26f04a96110cef71fc841b651ed", dce_ast = "a6d65ddce050d90d8d253084aa24068e1976e26f04a96110cef71fc841b651ed", bytecode = """
program test.aleo;

struct A:
    data as u8;

struct C:
    data as u8;

struct E:
    data as u8;

struct D:
    c as C;
    e as E;

struct B:
    a as A;
    d as D;

struct H:
    data as u8;

struct I:
    h as H;

struct G:
    i as I;

struct F:
    b as B;
    g as G;

function foo:
    input r0 as F.private;
    add r0.b.a.data r0.b.d.c.data into r1;
    add r1 r0.b.d.e.data into r2;
    add r2 r0.g.i.h.data into r3;
    output r3 as u8.private;
""", errors = "", warnings = "" }] }]]
