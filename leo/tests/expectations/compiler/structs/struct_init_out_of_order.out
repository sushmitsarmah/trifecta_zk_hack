namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "fce4f06c55fcf8d9b056abd03a00b40b5e4aad7d5898b0520f67cc7a06681f0b", unrolled_ast = "fce4f06c55fcf8d9b056abd03a00b40b5e4aad7d5898b0520f67cc7a06681f0b", ssa_ast = "62c3239efb45f0205489ba49fdc70d2054e5f09b62baafaa438606acc6c4ed71", flattened_ast = "b1b84f8aa6e995eedd8981a184ed0795bd0ce733fdf599f76032d66c8a15e302", destructured_ast = "1679e1b28c54bc007f9e989c5941ba5852dd32c8f6f1ce442b62b4f9c10091db", inlined_ast = "1679e1b28c54bc007f9e989c5941ba5852dd32c8f6f1ce442b62b4f9c10091db", dce_ast = "1679e1b28c54bc007f9e989c5941ba5852dd32c8f6f1ce442b62b4f9c10091db", bytecode = """
program test.aleo;

struct Foo:
    a as u8;
    b as u16;

struct Bar:
    a as u8;
    b as u8;

function main:
    input r0 as u8.private;
    input r1 as u16.private;
    add r0 r0 into r2;
    mul r1 r1 into r3;
    cast r2 r3 into r4 as Foo;
    cast r0 r2 into r5 as Bar;
    output r4 as Foo.private;
    output r5 as Bar.private;
""", errors = "", warnings = "" }] }]]
