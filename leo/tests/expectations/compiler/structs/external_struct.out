namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [
    { initial_ast = "80d537920cacd874248c4a04ad1c7f13fd9150a77c5f358786816ed23f7f1469", unrolled_ast = "80d537920cacd874248c4a04ad1c7f13fd9150a77c5f358786816ed23f7f1469", ssa_ast = "67b51b20c2e292a780020ab8605917f45108cf5348bf7221230224785a2ff9f5", flattened_ast = "0fcd3068648256a2f8f2d6ecbf015bb4be6e6ca3934361d9c7dff005db969b42", destructured_ast = "358a6f584cd0f6cb72940bed001c4f899ab5bec64fd853ecd77bbde396554329", inlined_ast = "358a6f584cd0f6cb72940bed001c4f899ab5bec64fd853ecd77bbde396554329", dce_ast = "358a6f584cd0f6cb72940bed001c4f899ab5bec64fd853ecd77bbde396554329", bytecode = """
program child.aleo;

record Boo:
    owner as address.private;
    val as u32.private;

struct Two:
    val1 as u32;
    val2 as u32;

struct One:
    two as [Two; 2u32];

struct Baz:
    one as One;

struct Bar:
    baz as [Baz; 2u32];

struct Foo:
    bar as [Bar; 1u32];

function create:
    cast 1u32 2u32 into r0 as Two;
    cast 3u32 4u32 into r1 as Two;
    cast  r0 r1 into r2 as [Two; 2u32];
    cast r2 into r3 as One;
    cast r3 into r4 as Baz;
    cast 5u32 6u32 into r5 as Two;
    cast 7u32 8u32 into r6 as Two;
    cast  r5 r6 into r7 as [Two; 2u32];
    cast r7 into r8 as One;
    cast r8 into r9 as Baz;
    cast  r4 r9 into r10 as [Baz; 2u32];
    cast r10 into r11 as Bar;
    cast  r11 into r12 as [Bar; 1u32];
    cast r12 into r13 as Foo;
    cast self.caller 10u32 into r14 as Boo.record;
    output r13 as Foo.private;
    output r14 as Boo.record;
""", errors = "", warnings = "" },
    { initial_ast = "6f336cf5b1dafd7cada6e05cf192fc1ea445eb7e0e4c363e61a814fae25b7461", unrolled_ast = "7d0e93818e46dc27ec5cd5c79d71f2ed3f88ec714075ddd364894a452bd73635", ssa_ast = "e1d7cf6ccc11755eed857785d7e09ff4f4daa21b6cc860bd8ac8449c270048f9", flattened_ast = "977ed6c81080f5dac68137e97d69b48e3476db3fc2770d0dd8fbb85db6801c4c", destructured_ast = "f6a21b79481faf95ff0495d9579510ff82e0f87fbf7c28f05b42e5921478eff8", inlined_ast = "f6a21b79481faf95ff0495d9579510ff82e0f87fbf7c28f05b42e5921478eff8", dce_ast = "ad6e474e1263201bdec885ca22305ce4965fbe7e3b27d7e7c6d3e12b5b89150b", bytecode = """
import child.aleo;
program parent.aleo;

struct Woo:
    a as u32;
    b as u32;

record BooHoo:
    owner as address.private;
    val as u32.private;
    woo as Woo.private;

struct Two:
    val1 as u32;
    val2 as u32;

struct One:
    two as [Two; 2u32];

struct Baz:
    one as One;

struct Bar:
    baz as [Baz; 2u32];

struct Foo:
    bar as [Bar; 1u32];

function create_wrapper:
    call child.aleo/create into r0 r1;
    output r0 as Foo.private;
    output r1 as child.aleo/Boo.record;

function create_another_wrapper:
    call child.aleo/create into r0 r1;
    cast 1u32 2u32 into r2 as Woo;
    cast self.caller 10u32 r2 into r3 as BooHoo.record;
    cast 3u32 4u32 into r4 as Woo;
    output r0 as Foo.private;
    output r1 as child.aleo/Boo.record;
    output r3 as BooHoo.record;
    output r4 as Woo.private;
""", errors = "", warnings = "" },
    { initial_ast = "8473d0584e78127a612fccd0c20273d13283bb10bf900bf0fe68963b04ff9d0e", unrolled_ast = "d597c4a4a9dda80008bd9e333bbf104318e294be627380ca03fd7c141edfdb47", ssa_ast = "13083334a8f117de456a16b687d89c9a17060697b59d352aab435dbcd619aea1", flattened_ast = "4915862b664c509380d5d4b95ac1260cd8e88f60b78a82013195ef9d3ed91539", destructured_ast = "bf843b64d15fe670c20e1febe0446859512be2babfd701e9d9b412da8194b67f", inlined_ast = "bf843b64d15fe670c20e1febe0446859512be2babfd701e9d9b412da8194b67f", dce_ast = "e93a226a421c1ea46eeb75d9b3b127d182357b1a626ef0a2706a48972256debd", bytecode = """
import child.aleo;
import parent.aleo;
program grandparent.aleo;

struct Two:
    val1 as u32;
    val2 as u32;

struct One:
    two as [Two; 2u32];

struct Baz:
    one as One;

struct Bar:
    baz as [Baz; 2u32];

struct Foo:
    bar as [Bar; 1u32];

struct Woo:
    a as u32;
    b as u32;

function main:
    input r0 as u32.private;
    add 1u32 r0 into r1;
    output r1 as u32.private;

function omega_wrapper:
    call parent.aleo/create_another_wrapper into r0 r1 r2 r3;
    output r0 as Foo.private;
    output r1 as child.aleo/Boo.record;
    output r2 as parent.aleo/BooHoo.record;
    output r3 as Woo.private;
""", errors = "", warnings = "" },
] }]]
