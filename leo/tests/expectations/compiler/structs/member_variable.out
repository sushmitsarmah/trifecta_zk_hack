namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "d89b9fdb5e70b86d396086607556d2948e8d9c6c5f5ef5bac79f5693f998e0ce", unrolled_ast = "d89b9fdb5e70b86d396086607556d2948e8d9c6c5f5ef5bac79f5693f998e0ce", ssa_ast = "cf645e1be13a0e77fe51422b2577805ec94ef0d975301860f0a950ca291dbea4", flattened_ast = "8845d50db3bfe49287e668ae154fa034204bfa55269013cc73733398e1022b1a", destructured_ast = "a7f28cc5f9919c72ef312cdfe442d985a2f1e1ac488d4e1a1f9ed212d0e9ffff", inlined_ast = "a7f28cc5f9919c72ef312cdfe442d985a2f1e1ac488d4e1a1f9ed212d0e9ffff", dce_ast = "a7f28cc5f9919c72ef312cdfe442d985a2f1e1ac488d4e1a1f9ed212d0e9ffff", bytecode = """
program test.aleo;

struct Foo:
    x as u32;

function main:
    input r0 as boolean.private;
    cast 1u32 into r1 as Foo;
    is.eq r1.x 1u32 into r2;
    is.eq r2 r0 into r3;
    output r3 as boolean.private;
""", errors = "", warnings = "" }] }]]
