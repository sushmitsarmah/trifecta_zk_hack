namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [
    { initial_ast = "1099e85d3866b5e46c17fbd0defc0e9276bd79a2a806abcf03a05d329fd235b8", unrolled_ast = "1099e85d3866b5e46c17fbd0defc0e9276bd79a2a806abcf03a05d329fd235b8", ssa_ast = "7ff9fbb26944ad717bd0f494d8b482fb0d3bf2cda4c4a10f1ba65daafe4321bf", flattened_ast = "bba9c79be8821a9bb7f5bc2f29b338b9845269a1469167c7cc2691489f58d850", destructured_ast = "b73b2c5fef99ba7d205693d1f80133273e4656bb81c754b2e656386421e82c5a", inlined_ast = "b73b2c5fef99ba7d205693d1f80133273e4656bb81c754b2e656386421e82c5a", dce_ast = "b73b2c5fef99ba7d205693d1f80133273e4656bb81c754b2e656386421e82c5a", bytecode = """
program child.aleo;

struct Two:
    val1 as u32;
    val2 as u32;

struct One:
    two as [Two; 2u32];

struct Baz:
    one as One;

struct Bar:
    baz as [Baz; 2u32];

struct Foo:
    bar as [Bar; 1u32];

function create:
    cast 1u32 2u32 into r0 as Two;
    cast 3u32 4u32 into r1 as Two;
    cast  r0 r1 into r2 as [Two; 2u32];
    cast r2 into r3 as One;
    cast r3 into r4 as Baz;
    cast 5u32 6u32 into r5 as Two;
    cast 7u32 8u32 into r6 as Two;
    cast  r5 r6 into r7 as [Two; 2u32];
    cast r7 into r8 as One;
    cast r8 into r9 as Baz;
    cast  r4 r9 into r10 as [Baz; 2u32];
    cast r10 into r11 as Bar;
    cast  r11 into r12 as [Bar; 1u32];
    cast r12 into r13 as Foo;
    output r13 as Foo.private;
""", errors = "", warnings = "" },
    { initial_ast = "c52ee7318f9217bbdaf84d1c1567ba00a7dbcc7171ab0884f318c5a8cf58382d", unrolled_ast = "6de6d6b771640a0558fa2a002317f88367cca98452bc06647fd3d6279f7ae527", ssa_ast = "68deede0d9a4bf893092fb18708e5edb0acef701896b2b216ca980a53031a381", flattened_ast = "135d4523a25c0c8f456f18ab7482b6625ef30463aa1d288dac5bc07b1e4995b1", destructured_ast = "0510356bf186e38cb818ca083b57b1330ff19fda54dd5818f3b45936065e06cd", inlined_ast = "0510356bf186e38cb818ca083b57b1330ff19fda54dd5818f3b45936065e06cd", dce_ast = "fa5b26471547574040dc8597e9512836d793d44e63db0db99a00bbd41bf06193", bytecode = """
import child.aleo;
program parent.aleo;

struct Two:
    val1 as u32;
    val2 as u32;

struct One:
    two as [Two; 2u32];

struct Baz:
    one as One;

struct Bar:
    baz as [Baz; 2u32];

struct Foo:
    bar as [Bar; 1u32];

function create_wrapper:
    call child.aleo/create into r0;
    output r0 as Foo.private;
""", errors = "", warnings = "" },
] }]]
