namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "2744442271ec20dc37bf0b9bf73e39079da06b8c5cdd134e3f5d931a955c8edf", unrolled_ast = "2744442271ec20dc37bf0b9bf73e39079da06b8c5cdd134e3f5d931a955c8edf", ssa_ast = "2744442271ec20dc37bf0b9bf73e39079da06b8c5cdd134e3f5d931a955c8edf", flattened_ast = "b7f1c450d79cd7a78d9e174e20b5b8a4feb687eb3782a031f50d0bddb2639863", destructured_ast = "4cdc7012d694d9c2b854780bdee40ae4eceaa809a0d05cd40285efd37aac90ce", inlined_ast = "4cdc7012d694d9c2b854780bdee40ae4eceaa809a0d05cd40285efd37aac90ce", dce_ast = "4cdc7012d694d9c2b854780bdee40ae4eceaa809a0d05cd40285efd37aac90ce", bytecode = """
program test.aleo;

function bar:
    input r0 as u8.private;
    input r1 as u8.private;
    assert.eq r0 r1;
    assert.eq r1 r0;

function baz:
    input r0 as u8.private;
    input r1 as u8.private;
    assert.eq r0 r1;
    assert.eq r1 r0;

function blar:
    input r0 as u8.private;
    input r1 as u8.private;
    assert.eq r0 r1;
    assert.eq r1 r0;

function blaz:
    input r0 as u8.private;
    input r1 as u8.private;
    assert.eq r0 r1;
    assert.eq r1 r0;
""", errors = "", warnings = "" }] }]]
