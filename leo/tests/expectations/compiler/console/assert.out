namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "ade6a543693f5fa250337f907a2fc60682e91a30041e4429c997a1a64d2a7d21", unrolled_ast = "ade6a543693f5fa250337f907a2fc60682e91a30041e4429c997a1a64d2a7d21", ssa_ast = "205b0e256162ee0f668c8eb126ead3fb6cfe5ab29e078b849510e4618599ed12", flattened_ast = "c20f911f4549bb2640dea1a42c952cf0d72b09c7ea38d85e8ae1cf4782bb218f", destructured_ast = "0e3ddfa4e71ebe6d7f86fa9ea0083973831945dccd0f84debd6f3302cfd724b2", inlined_ast = "0e3ddfa4e71ebe6d7f86fa9ea0083973831945dccd0f84debd6f3302cfd724b2", dce_ast = "0e3ddfa4e71ebe6d7f86fa9ea0083973831945dccd0f84debd6f3302cfd724b2", bytecode = """
program test.aleo;

record Token:
    owner as address.private;
    amount as u64.private;

struct Foo:
    a as u8;

function main:
    input r0 as boolean.private;
    input r1 as Foo.private;
    input r2 as Token.record;
    assert.eq r0 true;
    assert.neq r0 false;
    assert.eq r0 true;
    cast 0u8 into r3 as Foo;
    assert.eq r1 r3;
    cast aleo1lfapwg53y5enqpt0d8cnef4g8lj7l6g9uhkkma23qyv6jm4ppyfq50regr 0u64 into r4 as Token.record;
    assert.neq r2 r4;
    is.eq r0 true into r5;
    output r5 as boolean.private;
""", errors = "", warnings = "" }] }]]
