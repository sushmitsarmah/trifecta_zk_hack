namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "6ea28950d64ac41eeb8da3d87cb6e3810996f20e112e0642f59a60f761714f1d", unrolled_ast = "6ea28950d64ac41eeb8da3d87cb6e3810996f20e112e0642f59a60f761714f1d", ssa_ast = "2fb78fa3dc48ebb722b5e868aeae878da7e6eba06843316f0ebd1451adda1d7c", flattened_ast = "e50d2d001ea761618e59dc13b8b2f3834615637bfad5f740db2e2ad35d4f6679", destructured_ast = "d1a2969debc86ca62ad8beb0cc2dbc226521eb845399be0fb841df3041fc4e87", inlined_ast = "d1a2969debc86ca62ad8beb0cc2dbc226521eb845399be0fb841df3041fc4e87", dce_ast = "d1a2969debc86ca62ad8beb0cc2dbc226521eb845399be0fb841df3041fc4e87", bytecode = """
program test.aleo;

function main:
    input r0 as field.private;
    is.eq r0 0field into r1;
    not r1 into r2;
    is.eq r0 1field into r3;
    and r2 r3 into r4;
    not r3 into r5;
    is.eq r0 2field into r6;
    and r2 r5 into r7;
    and r7 r6 into r8;
    not r6 into r9;
    is.eq r0 3field into r10;
    and r7 r9 into r11;
    and r11 r10 into r12;
    not r10 into r13;
    is.eq r0 4field into r14;
    and r11 r13 into r15;
    and r15 r14 into r16;
    ternary r16 4u32 5u32 into r17;
    ternary r12 3u32 r17 into r18;
    ternary r8 2u32 r18 into r19;
    ternary r4 1u32 r19 into r20;
    ternary r1 0u32 r20 into r21;
    output r21 as u32.private;
""", errors = "", warnings = "" }] }]]
