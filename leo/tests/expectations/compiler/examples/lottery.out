namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "15b9546ab7a4c5d7beeb223816ddac37ea0572634bed5a2cc34bb311aa72e4cd", unrolled_ast = "15b9546ab7a4c5d7beeb223816ddac37ea0572634bed5a2cc34bb311aa72e4cd", ssa_ast = "232c939ca56f08e4b64bde91fe46378604c743c68d044734c4c0d87164feae0f", flattened_ast = "5d1ead6ab82deafdd0b1a0ef2bba29d5bcd013cef8696e992b1ee4b6d1c2b492", destructured_ast = "8aaca8c57b9195cf47bc6c7de8be3b4dbfd7a2577018fa2303d2c3824c5d0515", inlined_ast = "594722fe6c8f48eefc16c2bc6e4f7477a33d614dc460a9f140b414cc125181c6", dce_ast = "594722fe6c8f48eefc16c2bc6e4f7477a33d614dc460a9f140b414cc125181c6", bytecode = """
program lottery.aleo;

record Ticket:
    owner as address.private;

mapping num_winners:
    key as u8.public;
    value as u8.public;

function play:
    cast self.caller into r0 as Ticket.record;
    async play into r1;
    output r0 as Ticket.record;
    output r1 as lottery.aleo/play.future;

finalize play:
    lte block.height 1000u32 into r0;
    assert.eq r0 true;
    rand.chacha into r1 as boolean;
    assert.eq r1 true;
    get.or_use num_winners[0u8] 0u8 into r2;
    lt r2 5u8 into r3;
    assert.eq r3 true;
    add r2 1u8 into r4;
    set r4 into num_winners[0u8];
""", errors = "", warnings = "" }] }]]
