namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "316f17e78314ccc21c70c33178f93e42e621b2e5e18effd0e1232eaf45af5483", unrolled_ast = "8c85ffa2402d9ea3df54078a5b5cff7530f33927aa3654cbdd1221db97903b7a", ssa_ast = "3998c1295e29c53bab48a8efd8d463590af2b5f87fb30c2784a5ddc9a081f6af", flattened_ast = "ed1b0cfc0fda3116799ce6ea5cb57217ecdd4e5fde1348d7d83627aff9ff4a8d", destructured_ast = "52d2c7404a1c7794aaa674bf4aaf7506cd16ac960470a0932f167e4cc525bbdf", inlined_ast = "52d2c7404a1c7794aaa674bf4aaf7506cd16ac960470a0932f167e4cc525bbdf", dce_ast = "52d2c7404a1c7794aaa674bf4aaf7506cd16ac960470a0932f167e4cc525bbdf", bytecode = """
program test.aleo;

function main:
    input r0 as group.private;
    double r0 into r1;
    neg r1 into r2;
    mul r0 2scalar into r3;
    add r3 r2 into r4;
    add r4 1540945439182663264862696551825005342995406165131907382295858612069623286213group into r5;
    output r5 as group.private;
""", errors = "", warnings = "" }] }]]
