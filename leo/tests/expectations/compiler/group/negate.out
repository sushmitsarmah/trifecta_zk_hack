namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "4a6b7a52fb054f25ca7c1835d2ee01a3e0b315889705fd7bc7b98cae8d2032a0", unrolled_ast = "4a6b7a52fb054f25ca7c1835d2ee01a3e0b315889705fd7bc7b98cae8d2032a0", ssa_ast = "a70be724949267530a0cf37816e1d19fe8957317f04e7ae047126dbe1865b6c2", flattened_ast = "7ac75a56456af1702d24700c54144fc3e8159b5acd1b83b997d0d3d2d6065e98", destructured_ast = "dc2b29cf61747826deca237b374116a4f67bbba430ac3d7474a69467ecb06ebe", inlined_ast = "dc2b29cf61747826deca237b374116a4f67bbba430ac3d7474a69467ecb06ebe", dce_ast = "dc2b29cf61747826deca237b374116a4f67bbba430ac3d7474a69467ecb06ebe", bytecode = """
program test.aleo;

function main:
    input r0 as group.private;
    input r1 as group.private;
    neg r0 into r2;
    is.eq r2 r1 into r3;
    assert.eq r3 true;
    is.neq r0 -2group into r4;
    assert.eq r4 true;
    neg r0 into r5;
    is.eq r5 r1 into r6;
    output r6 as boolean.private;
""", errors = "", warnings = "" }] }]]
