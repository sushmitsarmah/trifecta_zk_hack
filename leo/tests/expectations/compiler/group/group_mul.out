namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "9b93dad98172e20ea5c19135bc2fedf8ea5a900e61caa79934989d4656f2d674", unrolled_ast = "9b93dad98172e20ea5c19135bc2fedf8ea5a900e61caa79934989d4656f2d674", ssa_ast = "5780bfce9c040791843ee1b140c47833429e085dac9fd500f11f8bfe9d001530", flattened_ast = "ce24c3d6754ef3058149ff3033df7e5877d2a8444a04ac8e8ae298aec050ef94", destructured_ast = "88d6233af41fe2e6df3819aa26666e94de961da403a9d79b59ea86cef8e1d84a", inlined_ast = "88d6233af41fe2e6df3819aa26666e94de961da403a9d79b59ea86cef8e1d84a", dce_ast = "33fc6892f8c0ced2940b5723b86789a1663611f8a63969622e8e2ad412bd5a83", bytecode = """
program test.aleo;

function main:
    input r0 as scalar.private;
    input r1 as group.private;
    input r2 as scalar.private;
    mul 1817767092074430972953743941103352519057913259183777531581123188265134806220group r0 into r3;
    mul r0 r1 into r4;
    mul r0 r4 into r5;
    is.eq r5 r3 into r6;
    output r6 as boolean.private;
""", errors = "", warnings = "" }] }]]
