namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "3b9473ecefd63ac652479cc7f639ee7f5fcdcd7ef7036b84ea70e7aff73ddcc3", unrolled_ast = "3b9473ecefd63ac652479cc7f639ee7f5fcdcd7ef7036b84ea70e7aff73ddcc3", ssa_ast = "0cb09af29a30b87d9e67f875a36774c7765284c78ca4b7ba7c1b185b0498a09f", flattened_ast = "3249c8482d4341537f945d5deb9c4c634f547a674698d9324e5dd463b247e800", destructured_ast = "be05c2dc2d82ac15f9ab9e6b83c6849846cf93fe2d817fe065bf9267dbc71627", inlined_ast = "be05c2dc2d82ac15f9ab9e6b83c6849846cf93fe2d817fe065bf9267dbc71627", dce_ast = "be05c2dc2d82ac15f9ab9e6b83c6849846cf93fe2d817fe065bf9267dbc71627", bytecode = """
program test.aleo;

function main:
    input r0 as i8.private;
    input r1 as i8.private;
    input r2 as i8.private;
    pow r0 2u8 into r3;
    pow r0 2u16 into r4;
    is.eq r3 r4 into r5;
    pow r0 2u32 into r6;
    is.eq r6 r2 into r7;
    and r5 r7 into r8;
    output r8 as boolean.private;
""", errors = "", warnings = "" }] }]]
