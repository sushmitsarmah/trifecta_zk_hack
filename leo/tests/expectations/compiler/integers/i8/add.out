namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "6bf9f1bd0ef96634db80a9e62255236aa622f6ce3c27c5e772e724c84abbba4a", unrolled_ast = "6bf9f1bd0ef96634db80a9e62255236aa622f6ce3c27c5e772e724c84abbba4a", ssa_ast = "df8026602cbb445165612ab879fde2336f6fee02d512f1d0c77c5529fced4aba", flattened_ast = "22e54eb89e368862bf939f78cd6b2053d5742ce92c3a4d1a51bad06a28611014", destructured_ast = "b36caa9dadd9d56989cd6b78713b0c93e697d851c335cf1175295f7287997bd8", inlined_ast = "b36caa9dadd9d56989cd6b78713b0c93e697d851c335cf1175295f7287997bd8", dce_ast = "b36caa9dadd9d56989cd6b78713b0c93e697d851c335cf1175295f7287997bd8", bytecode = """
program test.aleo;

function main:
    input r0 as i8.private;
    input r1 as i8.private;
    input r2 as i8.private;
    add r0 r1 into r3;
    add r3 1_1i8 into r4;
    add r4 1______1i8 into r5;
    add r2 1i8 into r6;
    is.eq r5 r6 into r7;
    output r7 as boolean.private;
""", errors = "", warnings = "" }] }]]
