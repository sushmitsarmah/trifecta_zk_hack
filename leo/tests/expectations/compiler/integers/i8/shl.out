namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "8de158e1b7900d050661761fae0634612f68f5a82d57044a31c06aa73469d2ef", unrolled_ast = "8de158e1b7900d050661761fae0634612f68f5a82d57044a31c06aa73469d2ef", ssa_ast = "21ac6159d8833d72c0d63f28b69ccee7f79a8582a2848421556bced3d7469840", flattened_ast = "e8f1bc558ef6d8a9aa3f80c4d987d68d8bbddbf2c5f568ad1bf1b50064ddea60", destructured_ast = "9d8a48cc561382b3119e92806bdb95c540f5fc63a11f1b2c2d4b08f9a4c264cc", inlined_ast = "9d8a48cc561382b3119e92806bdb95c540f5fc63a11f1b2c2d4b08f9a4c264cc", dce_ast = "9d8a48cc561382b3119e92806bdb95c540f5fc63a11f1b2c2d4b08f9a4c264cc", bytecode = """
program test.aleo;

function main:
    input r0 as i8.private;
    input r1 as i8.private;
    input r2 as i8.private;
    shl r0 2u8 into r3;
    shl r0 2u16 into r4;
    is.eq r3 r4 into r5;
    shl r0 2u32 into r6;
    is.eq r6 r2 into r7;
    and r5 r7 into r8;
    output r8 as boolean.private;
""", errors = "", warnings = "" }] }]]
