namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "f10eb80c81bbb230fc63f3da19336668ccb893dcd670af7bdd49507262f6a2a5", unrolled_ast = "f10eb80c81bbb230fc63f3da19336668ccb893dcd670af7bdd49507262f6a2a5", ssa_ast = "c7beb4be2a772f7cd0baa3b7baa9ea3b88b02f6a0cb245f92a44640beecd70ef", flattened_ast = "dccd7a0390db85ba820de12905c41f25b3282d929a1450822d8285caf58e06bc", destructured_ast = "b0d080b9c6b2c34764991060f52758881430ef465c83d95dfd57ef4e302244f7", inlined_ast = "b0d080b9c6b2c34764991060f52758881430ef465c83d95dfd57ef4e302244f7", dce_ast = "b0d080b9c6b2c34764991060f52758881430ef465c83d95dfd57ef4e302244f7", bytecode = """
program test.aleo;

function main:
    input r0 as u64.private;
    input r1 as u64.private;
    input r2 as u64.private;
    add r0 r1 into r3;
    is.eq r3 r2 into r4;
    output r4 as boolean.private;
""", errors = "", warnings = "" }] }]]
