namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "6ce60849dae80365e48f7f9be6e08eb0e0bc5ca768c3124ebfa44d0959dcffa9", unrolled_ast = "6ce60849dae80365e48f7f9be6e08eb0e0bc5ca768c3124ebfa44d0959dcffa9", ssa_ast = "cc4eb56c0d774b307222ed683227293cc60152ece904459de557dabcadf5b2bc", flattened_ast = "8119ff883bd63a4b5f7dca4517a34e9991e0e6100772418fce877cabcc3e135a", destructured_ast = "a6f7cd6a2a6e63045be371914c314fcd16581f15d76207b1092767f1ce27cd9a", inlined_ast = "a6f7cd6a2a6e63045be371914c314fcd16581f15d76207b1092767f1ce27cd9a", dce_ast = "a6f7cd6a2a6e63045be371914c314fcd16581f15d76207b1092767f1ce27cd9a", bytecode = """
program test.aleo;

function main:
    input r0 as u64.private;
    input r1 as u64.private;
    input r2 as u64.private;
    shr r0 2u8 into r3;
    shr r0 2u16 into r4;
    is.eq r3 r4 into r5;
    shr r0 2u32 into r6;
    is.eq r6 r2 into r7;
    and r5 r7 into r8;
    output r8 as boolean.private;
""", errors = "", warnings = "" }] }]]
