namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "c80e826d06c181c05109a8139b974819d97cf8efb2ed7ac70918e8e0b500c5b9", unrolled_ast = "c80e826d06c181c05109a8139b974819d97cf8efb2ed7ac70918e8e0b500c5b9", ssa_ast = "6ba2bcc27aaec94fbacfce0f00799f6a1c8e792ff2fb145953a942d0bc323a35", flattened_ast = "1aa11c36fbfcf526e0c0d83ec21135c507828be4ad32abfc02cba4672bdf3b7b", destructured_ast = "add1724df1472080ce3fb86f7e10ed916ca60d33e3d5fb0b20de67c919b1cb5a", inlined_ast = "add1724df1472080ce3fb86f7e10ed916ca60d33e3d5fb0b20de67c919b1cb5a", dce_ast = "add1724df1472080ce3fb86f7e10ed916ca60d33e3d5fb0b20de67c919b1cb5a", bytecode = """
program test.aleo;

function main:
    input r0 as u64.private;
    input r1 as u64.private;
    input r2 as boolean.private;
    is.neq r0 r1 into r3;
    is.eq r3 r2 into r4;
    output r4 as boolean.private;
""", errors = "", warnings = "" }] }]]
