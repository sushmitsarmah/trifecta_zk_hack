namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "75d12dd7a34bfb55032cd61803a07d3dfe94aa56e7ab249f4f93e5fbb2deefd4", unrolled_ast = "75d12dd7a34bfb55032cd61803a07d3dfe94aa56e7ab249f4f93e5fbb2deefd4", ssa_ast = "50c806bee4b10b119ac71a7743e73dc1ed479f54f1af532c236fd50b54bde847", flattened_ast = "d68b1862cfcbbd96cbe64fc8a9ec3fe87abd430d617a73d7352061a73c08e3c0", destructured_ast = "3320f40a4b4f5fd85e18c79850f35e2d243ea0e60297937848216d8b87beccf4", inlined_ast = "3320f40a4b4f5fd85e18c79850f35e2d243ea0e60297937848216d8b87beccf4", dce_ast = "3320f40a4b4f5fd85e18c79850f35e2d243ea0e60297937848216d8b87beccf4", bytecode = """
program test.aleo;

function main:
    input r0 as u128.private;
    input r1 as u128.private;
    input r2 as u128.private;
    shr r0 2u8 into r3;
    shr r0 2u16 into r4;
    is.eq r3 r4 into r5;
    shr r0 2u32 into r6;
    is.eq r6 r2 into r7;
    and r5 r7 into r8;
    output r8 as boolean.private;
""", errors = "", warnings = "" }] }]]
