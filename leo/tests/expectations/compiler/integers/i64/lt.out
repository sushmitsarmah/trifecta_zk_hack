namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "1d5952c29a9cdc2f3f9142047c9692ed157c59238fed6917655a4e9cdd59e300", unrolled_ast = "1d5952c29a9cdc2f3f9142047c9692ed157c59238fed6917655a4e9cdd59e300", ssa_ast = "500e8bc170e33ef86638afbc66d6c02c8aace89cb0e74feee7173d8d05b93567", flattened_ast = "1c1db737a708829721982482d6f1fc8d965147adc31e515232418158b41107cf", destructured_ast = "284c0ad2a0b2fecbbdd4354a4d909ad0d117d5ccbdbfbb7f7884258ab122d6c1", inlined_ast = "284c0ad2a0b2fecbbdd4354a4d909ad0d117d5ccbdbfbb7f7884258ab122d6c1", dce_ast = "284c0ad2a0b2fecbbdd4354a4d909ad0d117d5ccbdbfbb7f7884258ab122d6c1", bytecode = """
program test.aleo;

function main:
    input r0 as i64.private;
    input r1 as i64.private;
    input r2 as boolean.private;
    lt r0 r1 into r3;
    is.eq r3 r2 into r4;
    output r4 as boolean.private;
""", errors = "", warnings = "" }] }]]
