namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "ed87284a467f4d25b471d5882ef24ace6d18ced428c71a1a9e8cf56fd821d280", unrolled_ast = "ed87284a467f4d25b471d5882ef24ace6d18ced428c71a1a9e8cf56fd821d280", ssa_ast = "e4ebd9f25aed80b2d217c1f0708208e9cd8a0578e01c0fce04c66b1dbbc329e3", flattened_ast = "6fb7b3ac9af66dfcc73ed177a8b9a2065e172103bdafae046cb0d588b26e9eb6", destructured_ast = "0f11342476abe7ed2ba9ca4a1e846238f04be8d5086075258f8603c86ac99e59", inlined_ast = "0f11342476abe7ed2ba9ca4a1e846238f04be8d5086075258f8603c86ac99e59", dce_ast = "0f11342476abe7ed2ba9ca4a1e846238f04be8d5086075258f8603c86ac99e59", bytecode = """
program test.aleo;

function main:
    input r0 as i64.private;
    input r1 as i64.private;
    input r2 as i64.private;
    shl r0 2u8 into r3;
    shl r0 2u16 into r4;
    is.eq r3 r4 into r5;
    shl r0 2u32 into r6;
    is.eq r6 r2 into r7;
    and r5 r7 into r8;
    output r8 as boolean.private;
""", errors = "", warnings = "" }] }]]
