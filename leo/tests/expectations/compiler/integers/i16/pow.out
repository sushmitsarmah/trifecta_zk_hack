namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "d6f2bdb563127e390170ef13b2a50bf7156d5d10b850525c1350db16e0d93bd9", unrolled_ast = "d6f2bdb563127e390170ef13b2a50bf7156d5d10b850525c1350db16e0d93bd9", ssa_ast = "4a084d423586810e375172414eb6e9671e7080cd1a628939feaf3f54ae8c7ae9", flattened_ast = "ff147245e6925e970af4ef63f8091a010dce9b6b195013da38951c77de859551", destructured_ast = "58c01b9e4cd4ddee735df2c9009114d3386dcfcdf5340159f6591e049078b773", inlined_ast = "58c01b9e4cd4ddee735df2c9009114d3386dcfcdf5340159f6591e049078b773", dce_ast = "58c01b9e4cd4ddee735df2c9009114d3386dcfcdf5340159f6591e049078b773", bytecode = """
program test.aleo;

function main:
    input r0 as i16.private;
    input r1 as i16.private;
    input r2 as i16.private;
    pow r0 2u8 into r3;
    pow r0 2u16 into r4;
    is.eq r3 r4 into r5;
    pow r0 2u32 into r6;
    is.eq r6 r2 into r7;
    and r5 r7 into r8;
    output r8 as boolean.private;
""", errors = "", warnings = "" }] }]]
