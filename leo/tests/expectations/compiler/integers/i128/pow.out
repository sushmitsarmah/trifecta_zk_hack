namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_ast = "961bfb743525019a76e6dffd174a840fc06ef26454ae0f40957be24253af5e46", unrolled_ast = "961bfb743525019a76e6dffd174a840fc06ef26454ae0f40957be24253af5e46", ssa_ast = "146306f6f05eded52b192b9bfee4b86825ae855b719505a28bd15eba8590aa44", flattened_ast = "6eb70dfca778f3c552a2f841f86d669fb84babacb22b31aea760170d9a7f5b58", destructured_ast = "5baa97fd15783a0725b26a7227550130ba7116f1bfef909aa88c69250b6033e3", inlined_ast = "5baa97fd15783a0725b26a7227550130ba7116f1bfef909aa88c69250b6033e3", dce_ast = "5baa97fd15783a0725b26a7227550130ba7116f1bfef909aa88c69250b6033e3", bytecode = """
program test.aleo;

function main:
    input r0 as i128.private;
    input r1 as i128.private;
    input r2 as i128.private;
    pow r0 2u8 into r3;
    pow r0 2u16 into r4;
    is.eq r3 r4 into r5;
    pow r0 2u32 into r6;
    is.eq r6 r2 into r7;
    and r5 r7 into r8;
    output r8 as boolean.private;
""", errors = "", warnings = "" }] }]]
