program fibonacci.aleo;

closure reverse_bits:
    input r0 as u8;
    gt r0 0u8 into r1;
    shl 0u8 1u8 into r2;
    and r0 1u8 into r3;
    is.eq r3 1u8 into r4;
    xor r2 1u8 into r5;
    ternary r4 r5 r2 into r6;
    shr r0 1u8 into r7;
    ternary r1 r6 0u8 into r8;
    ternary r1 r7 r0 into r9;
    gt r9 0u8 into r10;
    shl r8 1u8 into r11;
    and r9 1u8 into r12;
    is.eq r12 1u8 into r13;
    xor r11 1u8 into r14;
    ternary r13 r14 r11 into r15;
    shr r9 1u8 into r16;
    ternary r10 r15 r8 into r17;
    ternary r10 r16 r9 into r18;
    gt r18 0u8 into r19;
    shl r17 1u8 into r20;
    and r18 1u8 into r21;
    is.eq r21 1u8 into r22;
    xor r20 1u8 into r23;
    ternary r22 r23 r20 into r24;
    shr r18 1u8 into r25;
    ternary r19 r24 r17 into r26;
    ternary r19 r25 r18 into r27;
    gt r27 0u8 into r28;
    shl r26 1u8 into r29;
    and r27 1u8 into r30;
    is.eq r30 1u8 into r31;
    xor r29 1u8 into r32;
    ternary r31 r32 r29 into r33;
    shr r27 1u8 into r34;
    ternary r28 r33 r26 into r35;
    ternary r28 r34 r27 into r36;
    gt r36 0u8 into r37;
    shl r35 1u8 into r38;
    and r36 1u8 into r39;
    is.eq r39 1u8 into r40;
    xor r38 1u8 into r41;
    ternary r40 r41 r38 into r42;
    shr r36 1u8 into r43;
    ternary r37 r42 r35 into r44;
    ternary r37 r43 r36 into r45;
    gt r45 0u8 into r46;
    shl r44 1u8 into r47;
    and r45 1u8 into r48;
    is.eq r48 1u8 into r49;
    xor r47 1u8 into r50;
    ternary r49 r50 r47 into r51;
    shr r45 1u8 into r52;
    ternary r46 r51 r44 into r53;
    ternary r46 r52 r45 into r54;
    gt r54 0u8 into r55;
    shl r53 1u8 into r56;
    and r54 1u8 into r57;
    is.eq r57 1u8 into r58;
    xor r56 1u8 into r59;
    ternary r58 r59 r56 into r60;
    shr r54 1u8 into r61;
    ternary r55 r60 r53 into r62;
    ternary r55 r61 r54 into r63;
    gt r63 0u8 into r64;
    shl r62 1u8 into r65;
    and r63 1u8 into r66;
    is.eq r66 1u8 into r67;
    xor r65 1u8 into r68;
    ternary r67 r68 r65 into r69;
    shr r63 1u8 into r70;
    ternary r64 r69 r62 into r71;
    ternary r64 r70 r63 into r72;
    output r71 as u8;

function fibonacci:
    input r0 as u8.public;
    lte r0 64u8 into r1;
    assert.eq r1 true;
    call reverse_bits r0 into r2;
    gt r0 0u8 into r3;
    mul 1u128 1u128 into r4;
    mul 0u128 0u128 into r5;
    add r4 r5 into r6;
    mul 2u128 1u128 into r7;
    sub r7 0u128 into r8;
    mul 0u128 r8 into r9;
    shl 1u8 0u8 into r10;
    and r2 r10 into r11;
    is.eq r11 0u8 into r12;
    not r12 into r13;
    add r9 r6 into r14;
    ternary r12 r9 r6 into r15;
    ternary r12 r6 r14 into r16;
    add 0u8 1u8 into r17;
    shr r0 1u8 into r18;
    ternary r3 r15 0u128 into r19;
    ternary r3 r16 1u128 into r20;
    ternary r3 r17 0u8 into r21;
    ternary r3 r18 r0 into r22;
    gt r22 0u8 into r23;
    mul r20 r20 into r24;
    mul r19 r19 into r25;
    add r24 r25 into r26;
    mul 2u128 r20 into r27;
    sub r27 r19 into r28;
    mul r19 r28 into r29;
    shl 1u8 r21 into r30;
    and r2 r30 into r31;
    is.eq r31 0u8 into r32;
    not r32 into r33;
    add r29 r26 into r34;
    ternary r32 r29 r26 into r35;
    ternary r32 r26 r34 into r36;
    add r21 1u8 into r37;
    shr r22 1u8 into r38;
    ternary r23 r35 r19 into r39;
    ternary r23 r36 r20 into r40;
    ternary r23 r37 r21 into r41;
    ternary r23 r38 r22 into r42;
    gt r42 0u8 into r43;
    mul r40 r40 into r44;
    mul r39 r39 into r45;
    add r44 r45 into r46;
    mul 2u128 r40 into r47;
    sub r47 r39 into r48;
    mul r39 r48 into r49;
    shl 1u8 r41 into r50;
    and r2 r50 into r51;
    is.eq r51 0u8 into r52;
    not r52 into r53;
    add r49 r46 into r54;
    ternary r52 r49 r46 into r55;
    ternary r52 r46 r54 into r56;
    add r41 1u8 into r57;
    shr r42 1u8 into r58;
    ternary r43 r55 r39 into r59;
    ternary r43 r56 r40 into r60;
    ternary r43 r57 r41 into r61;
    ternary r43 r58 r42 into r62;
    gt r62 0u8 into r63;
    mul r60 r60 into r64;
    mul r59 r59 into r65;
    add r64 r65 into r66;
    mul 2u128 r60 into r67;
    sub r67 r59 into r68;
    mul r59 r68 into r69;
    shl 1u8 r61 into r70;
    and r2 r70 into r71;
    is.eq r71 0u8 into r72;
    not r72 into r73;
    add r69 r66 into r74;
    ternary r72 r69 r66 into r75;
    ternary r72 r66 r74 into r76;
    add r61 1u8 into r77;
    shr r62 1u8 into r78;
    ternary r63 r75 r59 into r79;
    ternary r63 r76 r60 into r80;
    ternary r63 r77 r61 into r81;
    ternary r63 r78 r62 into r82;
    gt r82 0u8 into r83;
    mul r80 r80 into r84;
    mul r79 r79 into r85;
    add r84 r85 into r86;
    mul 2u128 r80 into r87;
    sub r87 r79 into r88;
    mul r79 r88 into r89;
    shl 1u8 r81 into r90;
    and r2 r90 into r91;
    is.eq r91 0u8 into r92;
    not r92 into r93;
    add r89 r86 into r94;
    ternary r92 r89 r86 into r95;
    ternary r92 r86 r94 into r96;
    add r81 1u8 into r97;
    shr r82 1u8 into r98;
    ternary r83 r95 r79 into r99;
    ternary r83 r96 r80 into r100;
    ternary r83 r97 r81 into r101;
    ternary r83 r98 r82 into r102;
    gt r102 0u8 into r103;
    mul r100 r100 into r104;
    mul r99 r99 into r105;
    add r104 r105 into r106;
    mul 2u128 r100 into r107;
    sub r107 r99 into r108;
    mul r99 r108 into r109;
    shl 1u8 r101 into r110;
    and r2 r110 into r111;
    is.eq r111 0u8 into r112;
    not r112 into r113;
    add r109 r106 into r114;
    ternary r112 r109 r106 into r115;
    ternary r112 r106 r114 into r116;
    add r101 1u8 into r117;
    shr r102 1u8 into r118;
    ternary r103 r115 r99 into r119;
    ternary r103 r116 r100 into r120;
    ternary r103 r117 r101 into r121;
    ternary r103 r118 r102 into r122;
    gt r122 0u8 into r123;
    mul r120 r120 into r124;
    mul r119 r119 into r125;
    add r124 r125 into r126;
    mul 2u128 r120 into r127;
    sub r127 r119 into r128;
    mul r119 r128 into r129;
    shl 1u8 r121 into r130;
    and r2 r130 into r131;
    is.eq r131 0u8 into r132;
    not r132 into r133;
    add r129 r126 into r134;
    ternary r132 r129 r126 into r135;
    ternary r132 r126 r134 into r136;
    add r121 1u8 into r137;
    shr r122 1u8 into r138;
    ternary r123 r135 r119 into r139;
    ternary r123 r136 r120 into r140;
    ternary r123 r137 r121 into r141;
    ternary r123 r138 r122 into r142;
    gt r142 0u8 into r143;
    mul r140 r140 into r144;
    mul r139 r139 into r145;
    add r144 r145 into r146;
    mul 2u128 r140 into r147;
    sub r147 r139 into r148;
    mul r139 r148 into r149;
    shl 1u8 r141 into r150;
    and r2 r150 into r151;
    is.eq r151 0u8 into r152;
    not r152 into r153;
    add r149 r146 into r154;
    ternary r152 r149 r146 into r155;
    ternary r152 r146 r154 into r156;
    add r141 1u8 into r157;
    shr r142 1u8 into r158;
    ternary r143 r155 r139 into r159;
    ternary r143 r156 r140 into r160;
    ternary r143 r157 r141 into r161;
    ternary r143 r158 r142 into r162;
    output r159 as u128.private;
