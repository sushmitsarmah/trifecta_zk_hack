program tictactoe.aleo;

struct Row:
    c1 as u8;
    c2 as u8;
    c3 as u8;

struct Board:
    r1 as Row;
    r2 as Row;
    r3 as Row;

function new:
    cast 0u8 0u8 0u8 into r0 as Row;
    cast 0u8 0u8 0u8 into r1 as Row;
    cast 0u8 0u8 0u8 into r2 as Row;
    cast r0 r1 r2 into r3 as Board;
    output r3 as Board.private;

closure check_for_win:
    input r0 as Board;
    input r1 as u8;
    is.eq r0.r1.c1 r1 into r2;
    is.eq r0.r1.c2 r1 into r3;
    and r2 r3 into r4;
    is.eq r0.r1.c3 r1 into r5;
    and r4 r5 into r6;
    is.eq r0.r2.c1 r1 into r7;
    is.eq r0.r2.c2 r1 into r8;
    and r7 r8 into r9;
    is.eq r0.r2.c3 r1 into r10;
    and r9 r10 into r11;
    or r6 r11 into r12;
    is.eq r0.r3.c1 r1 into r13;
    is.eq r0.r3.c2 r1 into r14;
    and r13 r14 into r15;
    is.eq r0.r3.c3 r1 into r16;
    and r15 r16 into r17;
    or r12 r17 into r18;
    is.eq r0.r1.c1 r1 into r19;
    is.eq r0.r2.c1 r1 into r20;
    and r19 r20 into r21;
    is.eq r0.r3.c1 r1 into r22;
    and r21 r22 into r23;
    or r18 r23 into r24;
    is.eq r0.r1.c2 r1 into r25;
    is.eq r0.r2.c2 r1 into r26;
    and r25 r26 into r27;
    is.eq r0.r3.c2 r1 into r28;
    and r27 r28 into r29;
    or r24 r29 into r30;
    is.eq r0.r1.c3 r1 into r31;
    is.eq r0.r2.c3 r1 into r32;
    and r31 r32 into r33;
    is.eq r0.r3.c3 r1 into r34;
    and r33 r34 into r35;
    or r30 r35 into r36;
    is.eq r0.r1.c1 r1 into r37;
    is.eq r0.r2.c2 r1 into r38;
    and r37 r38 into r39;
    is.eq r0.r3.c3 r1 into r40;
    and r39 r40 into r41;
    or r36 r41 into r42;
    is.eq r0.r1.c3 r1 into r43;
    is.eq r0.r2.c2 r1 into r44;
    and r43 r44 into r45;
    is.eq r0.r3.c1 r1 into r46;
    and r45 r46 into r47;
    or r42 r47 into r48;
    output r48 as boolean;

function make_move:
    input r0 as u8.private;
    input r1 as u8.private;
    input r2 as u8.private;
    input r3 as Board.private;
    is.eq r0 1u8 into r4;
    is.eq r0 2u8 into r5;
    or r4 r5 into r6;
    assert.eq r6 true;
    lte 1u8 r1 into r7;
    lte r1 3u8 into r8;
    and r7 r8 into r9;
    assert.eq r9 true;
    lte 1u8 r2 into r10;
    lte r2 3u8 into r11;
    and r10 r11 into r12;
    assert.eq r12 true;
    is.eq r1 1u8 into r13;
    is.eq r2 1u8 into r14;
    and r13 r14 into r15;
    is.eq r3.r1.c1 0u8 into r16;
    and r15 r16 into r17;
    not r17 into r18;
    is.eq r1 1u8 into r19;
    is.eq r2 2u8 into r20;
    and r19 r20 into r21;
    is.eq r3.r1.c2 0u8 into r22;
    and r21 r22 into r23;
    not r23 into r24;
    is.eq r1 1u8 into r25;
    is.eq r2 3u8 into r26;
    and r25 r26 into r27;
    is.eq r3.r1.c3 0u8 into r28;
    and r27 r28 into r29;
    not r29 into r30;
    is.eq r1 2u8 into r31;
    is.eq r2 1u8 into r32;
    and r31 r32 into r33;
    is.eq r3.r2.c1 0u8 into r34;
    and r33 r34 into r35;
    not r35 into r36;
    is.eq r1 2u8 into r37;
    is.eq r2 2u8 into r38;
    and r37 r38 into r39;
    is.eq r3.r2.c2 0u8 into r40;
    and r39 r40 into r41;
    not r41 into r42;
    is.eq r1 2u8 into r43;
    is.eq r2 3u8 into r44;
    and r43 r44 into r45;
    is.eq r3.r2.c3 0u8 into r46;
    and r45 r46 into r47;
    not r47 into r48;
    is.eq r1 3u8 into r49;
    is.eq r2 1u8 into r50;
    and r49 r50 into r51;
    is.eq r3.r3.c1 0u8 into r52;
    and r51 r52 into r53;
    not r53 into r54;
    is.eq r1 3u8 into r55;
    is.eq r2 2u8 into r56;
    and r55 r56 into r57;
    is.eq r3.r3.c2 0u8 into r58;
    and r57 r58 into r59;
    not r59 into r60;
    is.eq r1 3u8 into r61;
    is.eq r2 3u8 into r62;
    and r61 r62 into r63;
    is.eq r3.r3.c3 0u8 into r64;
    and r63 r64 into r65;
    ternary r65 r0 r3.r3.c3 into r66;
    ternary r59 r0 r3.r3.c2 into r67;
    ternary r59 r3.r3.c3 r66 into r68;
    ternary r53 r0 r3.r3.c1 into r69;
    ternary r53 r3.r3.c2 r67 into r70;
    ternary r53 r3.r3.c3 r68 into r71;
    ternary r47 r0 r3.r2.c3 into r72;
    ternary r47 r3.r3.c1 r69 into r73;
    ternary r47 r3.r3.c2 r70 into r74;
    ternary r47 r3.r3.c3 r71 into r75;
    ternary r41 r0 r3.r2.c2 into r76;
    ternary r41 r3.r2.c3 r72 into r77;
    ternary r41 r3.r3.c1 r73 into r78;
    ternary r41 r3.r3.c2 r74 into r79;
    ternary r41 r3.r3.c3 r75 into r80;
    ternary r35 r0 r3.r2.c1 into r81;
    ternary r35 r3.r2.c2 r76 into r82;
    ternary r35 r3.r2.c3 r77 into r83;
    ternary r35 r3.r3.c1 r78 into r84;
    ternary r35 r3.r3.c2 r79 into r85;
    ternary r35 r3.r3.c3 r80 into r86;
    ternary r29 r0 r3.r1.c3 into r87;
    ternary r29 r3.r2.c1 r81 into r88;
    ternary r29 r3.r2.c2 r82 into r89;
    ternary r29 r3.r2.c3 r83 into r90;
    ternary r29 r3.r3.c1 r84 into r91;
    ternary r29 r3.r3.c2 r85 into r92;
    ternary r29 r3.r3.c3 r86 into r93;
    ternary r23 r0 r3.r1.c2 into r94;
    ternary r23 r3.r1.c3 r87 into r95;
    ternary r23 r3.r2.c1 r88 into r96;
    ternary r23 r3.r2.c2 r89 into r97;
    ternary r23 r3.r2.c3 r90 into r98;
    ternary r23 r3.r3.c1 r91 into r99;
    ternary r23 r3.r3.c2 r92 into r100;
    ternary r23 r3.r3.c3 r93 into r101;
    ternary r17 r0 r3.r1.c1 into r102;
    ternary r17 r3.r1.c2 r94 into r103;
    ternary r17 r3.r1.c3 r95 into r104;
    ternary r17 r3.r2.c1 r96 into r105;
    ternary r17 r3.r2.c2 r97 into r106;
    ternary r17 r3.r2.c3 r98 into r107;
    ternary r17 r3.r3.c1 r99 into r108;
    ternary r17 r3.r3.c2 r100 into r109;
    ternary r17 r3.r3.c3 r101 into r110;
    cast r102 r103 r104 into r111 as Row;
    cast r105 r106 r107 into r112 as Row;
    cast r108 r109 r110 into r113 as Row;
    cast r111 r112 r113 into r114 as Board;
    call check_for_win r114 1u8 into r115;
    not r115 into r116;
    call check_for_win r114 2u8 into r117;
    and r116 r117 into r118;
    not r117 into r119;
    and r116 r119 into r120;
    ternary r118 r114.r1.c1 r114.r1.c1 into r121;
    ternary r118 r114.r1.c2 r114.r1.c2 into r122;
    ternary r118 r114.r1.c3 r114.r1.c3 into r123;
    cast r121 r122 r123 into r124 as Row;
    ternary r118 r114.r2.c1 r114.r2.c1 into r125;
    ternary r118 r114.r2.c2 r114.r2.c2 into r126;
    ternary r118 r114.r2.c3 r114.r2.c3 into r127;
    cast r125 r126 r127 into r128 as Row;
    ternary r118 r114.r3.c1 r114.r3.c1 into r129;
    ternary r118 r114.r3.c2 r114.r3.c2 into r130;
    ternary r118 r114.r3.c3 r114.r3.c3 into r131;
    cast r129 r130 r131 into r132 as Row;
    cast r124 r128 r132 into r133 as Board;
    ternary r118 2u8 0u8 into r134;
    ternary r115 r114.r1.c1 r133.r1.c1 into r135;
    ternary r115 r114.r1.c2 r133.r1.c2 into r136;
    ternary r115 r114.r1.c3 r133.r1.c3 into r137;
    cast r135 r136 r137 into r138 as Row;
    ternary r115 r114.r2.c1 r133.r2.c1 into r139;
    ternary r115 r114.r2.c2 r133.r2.c2 into r140;
    ternary r115 r114.r2.c3 r133.r2.c3 into r141;
    cast r139 r140 r141 into r142 as Row;
    ternary r115 r114.r3.c1 r133.r3.c1 into r143;
    ternary r115 r114.r3.c2 r133.r3.c2 into r144;
    ternary r115 r114.r3.c3 r133.r3.c3 into r145;
    cast r143 r144 r145 into r146 as Row;
    cast r138 r142 r146 into r147 as Board;
    ternary r115 1u8 r134 into r148;
    output r147 as Board.private;
    output r148 as u8.private;
